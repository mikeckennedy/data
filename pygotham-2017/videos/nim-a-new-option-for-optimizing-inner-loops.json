{
  "copyright_text": "Creative Commons Attribution license (reuse allowed)",
  "description": "Nim_ is a relatively young and unknown programming language that provides an enticing mix of features to the Python programmer looking to deploy highly optimized, efficient code. It has a syntax that should be familiar to Pythonistas, including significant whitespace. It is oriented towards expressiveness and ease of composition, including a powerful macro and templating system. However, it is also fast: it's strongly typed, imperative, and compiles to C.\n\n.. _Nim: https://nim-lang.org/\n\nPython has extremely robust support for importing shared libraries written in C as a means to optimize certain areas of an application for performance. However, C is... C. It's tricky to write, requires manual memory management and manual pointer manipulation, has no type inference... It's everything that most Python programmers write Python in order to avoid.\n\nHowever, the fact that Nim compiles to C means we can write highly performant code in a modern language and then employ Python's robust and pervasive C support to call it.\n\nIn this talk we'll review a little bit of the Nim language itself, and dive into how to smoothly use it in a Python application.",
  "duration": 1500,
  "language": "eng",
  "recorded": "2017-10-06",
  "related_urls": [
    "https://2017.pygotham.org/talks/nim-a-new-option-for-optimizing-inner-loops/"
  ],
  "speakers": [
    "Z. D. Smith"
  ],
  "tags": [],
  "thumbnail_url": "https://i.ytimg.com/vi/IVgNVJdizHg/maxresdefault.jpg",
  "title": "Nim: A New Option for Optimizing Inner Loops",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=IVgNVJdizHg"
    }
  ]
}
