{
  "alias": "video/2938/building-realtime-web-applications-with-webrtc-an",
  "category": "EuroPython 2014",
  "copyright_text": "http://creativecommons.org/licenses/by/3.0/",
  "description": "Introduction\n============\n\nThis talk will first introduce the audience to WebRTC and then discuss\nabout how to implement the server side logic of a WebRTC app using\nPython.\n\nWebRTC is a free, open project that enables web browsers with\nplugin-less Real-Time Communications (RTC) capabilities via simple\nJavaScript APIs. What makes WebRTC special is that the data travels from\none client to another without going through the server.\n\nThe main functions of WebRTC can be broadly categorized into three\ntypes.\n\n-  Access and acquire video and audio streams\n-  Establish a connection between peers and stream audio/video.\n-  Communicate arbitrary data.\n\nWebRTC uses three different JavaScript APIs to perform these three\nfunctions. These APIs are:\n\n-  MediaStream (aka getUserMedia)\n-  RTCPeerConnection\n-  RTCDataChannel\n\nMediaStream API performs the task of accessing the webcam and/or\nmicrophone of the device and acquire the video and/or audio stream from\nthem. RTCPeerConnection API establishes connection between peers and\nstreams audio and video data. This API also does all the encoding and\ndecoding of audio/video data. The third API, RTCDataChannel helps to\ncommunicate arbitrary data from one client to the other.\n\nThere will be short demos to demonstrate the functionalities of these\nAPIs.\n\nSignaling and Session Control\n=============================\n\nWebRTC uses RTCPeerConnection to communicate streaming data between\nbrowsers, but some sort of mechanism is needed to coordinate this\ncommunication and to send control messages. This process is known as\nsignaling.\n\nSignaling is used to exchange three types of information.\n\n-  Session control messages: to initialize or close communication and\n   report errors.\n-  Network configuration: to the outside world, what's my computer's IP\n   address and port?\n-  Media capabilities: what codecs and resolutions can be handled by my\n   browser and the browser it wants to communicate with?\n\nThis can be implemented using any appropriate two way communication\nchannel.\n\nImplementing signaling in Python\n================================\n\nNext, we will have a look at how to implement this signaling mechanism\nin Python. ( Demonstration with annotated code and live application.)\n\nGoogle AppEngine and the Channel API\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nGoogle AppEngine has a channel API which offers persistent connections\nbetween your application and Google servers, allowing your application\nto send messages to JavaScript clients in real time without the use of\npolling. We'll use this Channel API to build the signaling system of our\nWebRTC app on top of webapp2 and flask framework.\n\nFlask and gevent\n~~~~~~~~~~~~~~~~\n\nWe'll implement the same signaling system again, this time on top of\nFlask using gevent for the persistent connection between the browser and\nour application.\n\nOutline of the talk\n===================\n\nIntro (5 min)\n~~~~~~~~~~~~~\n\n-  Who are we?\n-  What is WebRTC?\n-  Functions of WebRTC.\n\nWebRTC APIs and Demos (3 min)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n-  MediaStream (getUserMedia) API\n-  RTCPeerConnection API\n-  RTCDataChannel API\n\nSignaling in WebRTC Applications (3 min)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n-  What is signaling?\n-  Why is it needed?\n-  How to implement it?\n\nImplementation of signaling (16 min)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n-  Implementation using Google AppEngine and Channel API\n-  Implementation using Flask and gevent\n\nQuestions (3 min)\n~~~~~~~~~~~~~~~~~\n\n",
  "duration": null,
  "id": 2938,
  "language": "eng",
  "quality_notes": "",
  "recorded": "2014-07-25",
  "slug": "building-realtime-web-applications-with-webrtc-an",
  "speakers": [
    "Tarashish Mishra"
  ],
  "summary": "WebRTC makes building peer to peer real time web applications easier.\nFirst, we'll discuss in short what WebRTC is, how it works. Then we will\nexplore ways to build the signalling system of a WebRTC app using\nPython.\n",
  "tags": [],
  "thumbnail_url": "https://i.ytimg.com/vi/uBV_KKGzNqQ/hqdefault.jpg",
  "title": "Building Realtime Web Applications with WebRTC and Python",
  "videos": [
    {
      "length": 0,
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=uBV_KKGzNqQ"
    }
  ]
}
