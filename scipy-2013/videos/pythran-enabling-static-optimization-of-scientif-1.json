{
  "alias": "video/2129/pythran-enabling-static-optimization-of-scientif-1",
  "category": "SciPy 2013",
  "copyright_text": "https://www.youtube.com/t/terms",
  "description": "",
  "duration": null,
  "id": 2129,
  "language": "eng",
  "quality_notes": "",
  "recorded": "2013-07-01",
  "slug": "pythran-enabling-static-optimization-of-scientif-1",
  "speakers": [],
  "summary": "Authors: Guelton, Serge, ENS ; Brunet, Pierrick, T\u00e9l\u00e9com Bretagne ;\nRaynaud, Alan, T\u00e9l\u00e9com Bretagne; Adrien Merlini, T\u00e9l\u00e9com Bretagne; Mehdi\nAmini, SILKAN\n\nTrack: General\n\nPythran is a young open source static compiler that turns Python modules\ninto native ones. Based on the fact that scientific modules do not rely\nmuch on the dynamic features of the language, it trades them against\npowerful, eventually inter procedural, optimizations, such as:\n\nautomatic detection of pure functions; temporary allocation removal;\nconstant folding; numpy ufunc fusion and parallelisation; explicit\nparallelism through OpenMP annotations; false variable polymorphism\npruning; AVX/SSE vector instruction generation. In addition to these\ncompilation steps, Pythran provides a C++ runtime that leverages on the\nC++ STL for generic containers, and the Numeric Template Toolbox (nt2)\nfor numpy support. It takes advantage of modern C++11 features such as\nvariadic templates, type inference, move semantics and perfect\nforwarding, as well as classical ones such as expression templates.\n\nThe input code remains compatible with the Python interpreter, and\noutput code is generally as efficient as the annotated Cython\nequivalent, if not more, without the backward compatibility loss. Numpy\nexpressions runs as fast as if compiled with numexpr, without change on\nthe original code.\n",
  "tags": [
    "Tech"
  ],
  "thumbnail_url": "https://i1.ytimg.com/vi/KT5-uGEpnGw/hqdefault.jpg",
  "title": "Pythran: Enabling Static Optimization of Scientific Python Programs; SciPy 2013 Presentation",
  "videos": [
    {
      "length": 0,
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=KT5-uGEpnGw"
    }
  ]
}
