{
  "description": "Python successfully maintains a fine balance between being easy to learn and\nuseful for even large-scale projects.\nThis is achieved both through the design of the language, and through\nthe community.\n\nOn the language design side, Python is built around a closely curated set\nof mechanisms \u2013 iterators, attribute/item access, callables, context managers,\nand so on.\nI'll compare this set to languages like C, Lisp, Java, C++, and JavaScript,\nand show why it works \u2013 and where it could be better.\n\nIn design discussions around Python, the phrase \"consenting adults\" is\noften repeated.\nPython is designed to not prevent its users from doing anything.\nYou can fairly freely inspect classes or even monkeypatch as needed.\nTo balance this freedom, there is a vague, ever-changing notion of \"Pythonic\ncode\", which is nevertheless quite successful in making the Python that\nactual programmers use quite a strict language.\nI'll share some insights about about how this balance works out, and how it\nhelped make Python the language \u2013 and community \u2013 that it is today.",
  "duration": 1663,
  "language": "eng",
  "recorded": "2017-03-11",
  "speakers": [
    "Petr Viktorin"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/uS4gmBM-WvA/hqdefault.jpg",
  "title": "The Balance of Python",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=uS4gmBM-WvA"
    }
  ]
}
