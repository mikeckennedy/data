{
  "description": "In 2008 \u2014 after years of threatening to do so \u2014 the Python programming language was forked. Python 3 promised to improve a lot of inconsistency and difficulty in the language, and pave the way for performance improvements and new language features. It also broke backwards compatibility with Python 2.\n\nFor years, Python 3 was a difficult language to adopt: bad porting advice meant that transitioning from Python 2 to Python 3 was difficult. Many key Python libraries also took an awfully long time to be ported to Python 3, which kept projects that depended upon them stuck using Python 2.\n\nIn the last few years, however, Python 3 has finally reached the point where it\u2019s the language that you should be using. Big projects like Django have made the switch and are now stable, which means it\u2019s not only possible, but actually a good idea to start writing new code in Python 3.\n\nIn this talk, we\u2019ll look at some early missteps in the transition process for Python 3 \u2014 we\u2019ll look at language changes that got in the way of making porting to Python 3 an easy process. We\u2019ll look at why the original advice for how to adopt Python 3 was bad, and what the correct way to adopt Python 3 now looks like.\n\nWe\u2019ll also look at the last 8 years of language features that have been added to Python 3, many of which make writing asynchronous code super-easy.\n\nPython 3 is new, shiny, and ready for you to use. Come and learn why now is the time to make the switch!",
  "duration": 1844,
  "language": "eng",
  "recorded": "2017-08-06",
  "speakers": [
    "Christopher Neugebauer"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/NKmLTW8DHWw/hqdefault.jpg",
  "title": "Python 3 for People Who Haven't Been Paying Attention",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=NKmLTW8DHWw"
    }
  ]
}
