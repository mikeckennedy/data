{
  "alias": "video/39/djangocon-2010--massaging-the-pony--message-queue",
  "category": "DjangoCon 2010",
  "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
  "description": "Message queues are a potential solution for any site that needs to\nfacilitate robust asynchronous operations on your website including\ncarrying out intensive or long-running actions or synchronizing off-site\nservices. We will look at how PBS has used Celery and RabbitMQ to\nprovide more reliable service and how to set up a robust message queue\nsolution in a cloud hosting environment.\n\nAbstract\n\nIn maintaining several different site projects written in Django over\nthe past four years, the PBS Education team repeatedly found the need\nfor the ability to create asynchronous processes that could handle\nlong-running actions and mission-critical synchronization. We needed a\nway to handle tasks such as generating reports on large data sets and\nexecuting remote processes on fussy third-party services. The clear\nsolution to the problems we encountered was to implement a robust\nmessage queue solution.\n\nMessage queues allow sites to execute processes outside the normal HTTP\nrequest cycle and then deliver the results of those processes in a\nvariety of ways. After a survey of all available message queue solutions\nwe settled on a combination of Celery and RabbitMQ to create a reliable,\nalways-available system that can handle mission-critical tasks. We can\neasily develop against a message queue in our development builds, and we\nhave an infrastucture based in a cloud hosting service that allows us to\nrely on the message queue without reservation.\n\nIn this talk will will look at what a message queue does for your site,\nhow to implement a message queue in your Django code, and how to set up\na reliable message queue infrastructure on your servers. We will show\nexamples from some of our sites at PBS so it is clear how message queues\nwork and to present some common use cases that warrant a message queue\nsolution. We will also discuss some of the design patterns that made it\neasy to switch to message queue based processing for discreet tasks, as\nwell as some of the things we learned that have made the solution even\neasier to implement for new tasks.\n",
  "duration": null,
  "id": 39,
  "language": "eng",
  "quality_notes": "",
  "recorded": "2010-09-09",
  "slug": "djangocon-2010--massaging-the-pony--message-queue",
  "speakers": [
    "Shawn Rider"
  ],
  "summary": "",
  "tags": [
    "celery",
    "djangocon",
    "djangocon2010",
    "messagequeues",
    "queues",
    "rabbitmq"
  ],
  "thumbnail_url": "https://archive.org/services/img/pyvideo_39___massaging-the-pony-message-queues-and-you",
  "title": "Massaging the Pony: Message Queues and You",
  "videos": [
    {
      "type": "archive.org",
      "url": "https://archive.org/details/pyvideo_39___massaging-the-pony-message-queues-and-you"
    }
  ]
}
