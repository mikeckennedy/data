{
  "alias": "video/1223/total-recall-flmake-and-the-quest-for-reproducib",
  "category": "SciPy 2012",
  "copyright_text": "CC BY-SA",
  "description": "`FLASH <http://flash.uchicago.edu/site/>`__ is a high-performance\ncomputing (HPC) multi-physics code which is used to perform\nastrophysical and high-energy density physics simulations. It runs on\nthe full range of systems from laptops to workstations to 100,000\nprocessor super computers - such as the Blue Gene/P at Argonne National\nLaboratory.\n\nHistorically, FLASH was born from a collection of unconnected legacy\ncodes written primarily in Fortran and merged into a single project.\nOver the past 13 years major sections have been rewritten in other\nlanguages. For instance, I/O is now implemented in C. However building,\ntesting, and documentation are all performed in Python.\n\nFLASH has a unique architecture which compiles *simulation specific*\nexecutables for each new type of run. This is aided by an\nobject-oriented- esque inheritance model that is implemented by\ninspecting the file system's directory hierarchy. This allows FLASH to\ncompile to faster machine code than a compile-once strategy. However it\nalso places a greater importance on the Python build system.\n\nTo run a FLASH simulation, the user must go through three basic steps:\nsetup, build, and execution. Canonically, each of these tasks are\nindependently handled by the user. However, with the recent advent of\n`flmake <http://flash.%20uchicago.edu/site/flashcode/user_support/tools4b/usersguide/flmake/index.htm>`__\n- a Python workflow management utility for FLASH - such tasks may now be\nperformed in a repeatable way.\n\nPrevious workflow management tools have been written for FLASH. (For\nexample, the \"Milad system\" was implemented entirely in Makefiles.)\nHowever, none of the priorattempts have placed reproducibility as their\nprimary concern. This is in part becausefully capturing the setup\nmetadata requires alterations to the build system.\n\nThe development of flmake started by rewriting the existing build\nsystemto allow FLASH to be run outside of the main line subversion\nrepository. It separates outproject and simulation directories\nindependent of the FLASH source directory. Thesedirectories are\ntypically under their own version control.\n\nMoreover for each of the important tasks (setup, build, run, etc), a\nsidecar metadata *description* file is either written or appended to.\nThis is a simple dictionary-of-dictionaries JSON file which stores the\nenvironment of the system and the state of the code when each flmake\ncommand is run. This metadata includes the version information of both\nthe FLASH main line and project repositories. However, it also may\ninclude *all* local modifications since the last commit. A patch is\nautomatically generated using the Python standard library ``difflib``\nmodule and stored directly in the description.\n\nAlong with universally unique identifiers, logging, and Python run\ncontrol files, the flmake utility may use the description files to fully\nreproduce a simulation by re-executing each command in its original\nenvironment and state. While ``flmake reproduce`` makes a useful\ndebugging tool, it fundamentally increases the scientific merit of FLASH\nsimulations.\n\nThe methods described above may be used whenever source code itself is\ndistributed. While this is true for FLASH (uncommon amongst\ncompiledcodes), most Python packages also distribute their source.\nTherefore the same reproducibility strategy is applicable and highly\nrecommended for Python simulation codes. Thus flmake shows that\nreproducibility - which is notably absent from most computational\nscience projects - is easily attainable using only version control and\nstandard library modules.\n",
  "duration": null,
  "id": 1223,
  "language": "eng",
  "quality_notes": "",
  "recorded": "2012-07-19",
  "related_urls": [
    "http://flash.%20uchicago.edu/site/flashcode/user_support/tools4b/usersguide/flmake/index.htm",
    "http://flash.uchicago.edu/site/"
  ],
  "slug": "total-recall-flmake-and-the-quest-for-reproducib",
  "speakers": [
    "Anthony Scopatz"
  ],
  "summary": "",
  "tags": [
    "General"
  ],
  "thumbnail_url": "https://i4.ytimg.com/vi/ce4UU0ltbPA/hqdefault.jpg",
  "title": "Total Recall: flmake and the Quest for Reproducibility",
  "videos": [
    {
      "type": "mp4",
      "url": "http://s3.us.archive.org/nextdayvideo/enthought/scipy_2012/Total_Recall_flmake_and_the_Quest_for_Reproducibility.mp4?Signature=RXHp35B0p8ekEKA0Uds%2F6w73sRs%3D&Expires=1346382337&AWSAccessKeyId=FEWGReWX3QbNk0h3"
    },
    {
      "length": 0,
      "type": "youtube",
      "url": "http://youtube.com/watch?v=ce4UU0ltbPA"
    }
  ]
}
