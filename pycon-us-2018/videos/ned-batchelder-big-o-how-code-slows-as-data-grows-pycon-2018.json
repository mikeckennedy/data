{
  "copyright_text": "Standard YouTube License",
  "description": "Big-O is a computer science technique for analyzing how code performs as data gets larger.  It's a very handy tool for the working programmer, but it's often shrouded in off-putting mathematics.\n\nIn this talk, I'll teach you what you need to know about Big-O, and how to use it to keep your programs running well.  Big-O helps you choose the data structures and algorithms that will let your code work efficiently even on large data sets.\n\nYou can understand Big-O even if you aren't a theoretical computer science math nerd. Big-O isn't as mystical as it appears. It's wrapped in mathematical trappings, but doesn't have to be more than a common-sense assessment of how your code will behave.",
  "duration": 1731,
  "language": "eng",
  "recorded": "2018-05-13",
  "related_urls": [
    {
      "label": "Conference schedule",
      "url": "https://us.pycon.org/2018/schedule/talks/"
    },
    {
      "label": "Conference slides (SpeakerDeck)",
      "url": "https://speakerdeck.com/pycon2018"
    },
    {
      "label": "talk schedule",
      "url": "https://us.pycon.org/2018/schedule/presentation/139/"
    }
  ],
  "speakers": [
    "Ned Batchelder"
  ],
  "tags": [],
  "thumbnail_url": "https://i.ytimg.com/vi/duvZ-2UK0fc/maxresdefault.jpg",
  "title": "Big-O: How Code Slows as Data Grows",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=duvZ-2UK0fc"
    }
  ]
}