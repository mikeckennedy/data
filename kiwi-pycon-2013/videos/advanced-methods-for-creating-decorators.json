{
  "alias": "video/2444/advanced-methods-for-creating-decorators",
  "category": "Kiwi PyCon 2013",
  "copyright_text": "",
  "description": "@ Kiwi PyCon 2013 - Sunday, 08 Sep 2013 - Track 1\n\n**Audience level**\n\nExperienced\n\n**Abstract**\n\nA decorator is any callable Python object that is used to modify a\nfunction, method or class definition. A decorator is passed the original\nobject being defined and returns a modified object, which is then bound\nto the name in the definition.\n\nOne would generally expect the result of applying a decorator to an\nobject to be another object which is not readily distinguishable from\nthe original. Naive implementations of decorators do not however\npreserve introspectability. This can result in callable objects having\ndifferent names, appearing to have different signatures or not returning\nthe original doc strings. This can cause problems for tools where you\nwant to derive information about the original wrapped object such as\ndebuggers, IDEs, documentation systems or performance monitoring\nsoftware.\n\nThe use of the functools.wraps() decorator addresses some of these\nissues, but relies on decorators being implemented as closures. Using a\nclosure to implement a decorator will not always work when wrapping\nfunctions where the descriptor protocol needs to be triggered to bind a\nfunction to an instance, to create an instance method, or where the\nfunction is a special method type such as a class method or static\nmethod.\n\nA more robust decorator, and one where the decorator is able to\ndistinguish when it is being applied to a normal function or instance\nmethod, needs to be implemented as a combination of a wrapper and a\ndescriptor. To also be able to use this as a generic wrapper when\nperforming monkey patching requires even more tricks.\n\nThe purpose of this talk is to walk through the various problems which\narise with the more common ways of implementing decorators. It will then\ndescribe how to create a more robust generic wrapper/decorator which can\nbe used in a wider range of scenarios than typical decorators.\n\n**Slides**\n\nhttps://speakerdeck.com/nzpug/graham-dumpleton-advanced-methods-for-creating-decorators\n",
  "duration": null,
  "id": 2444,
  "language": "eng",
  "quality_notes": "",
  "recorded": "2013-09-15",
  "related_urls": [
    "https://speakerdeck.com/nzpug/graham-dumpleton-advanced-methods-for-creating-decorators"
  ],
  "slug": "advanced-methods-for-creating-decorators",
  "speakers": [
    "Graham Dumpleton"
  ],
  "summary": "Decorators are a simple concept, yet extremely powerful. Implementing\ndecorators which will work in a range of contexts is however non\ntrivial. This talk will walk through various problems which arise with\nthe more common ways of implementing decorators and then describe how to\ncombine a wrapper and a descriptor to build a better decorator.\n",
  "tags": [],
  "thumbnail_url": "https://i1.ytimg.com/vi/W7Rv-km3ZuA/hqdefault.jpg",
  "title": "Advanced methods for creating decorators",
  "videos": [
    {
      "length": 0,
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=W7Rv-km3ZuA"
    }
  ]
}
