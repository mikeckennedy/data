{
  "alias": "video/2816/the-road-to-modelr-building-a-commercial-web-app",
  "category": "SciPy 2014",
  "copyright_text": "https://www.youtube.com/t/terms",
  "description": "Software for applied geoscientists in the petroleum industry is usually\nexpensive, hard to use, Windows or Linux only, and slow to evolve.\nFurthermore, it is almost always stridently proprietary and therefore\nblack-box. Open source software is rare. There are few developers\nworking outside of seismic processing and enterprise database\ndevelopment, and consequently there is very little in the web and mobile\ndomain. Reconciling a commitment to open source with a desire to earn a\ngood living is one of the great conundrums of software engineering. We\nhave chosen a hybrid approach of open core (like OpendTect, which has\nproprietary add-ons) and software-as-a-service (like WordPress.org vs\nWordPress.com).\n\nOpen source back-end\n--------------------\n\nOur open core is a Python web app for producing synthetic seismic\nmodels, in much the same way that the now-deprecated `Google Image\nCharts API <https://developers.google.com/chart/image/>`__ used to work:\nthe user provides a URL, which contains all the relevant data, and a\nJPEG image generated by matplotlib is returned. Along with the image, we\nreturn some computed data about the model, such as the elastic\nproperties of the rocks involved. The mode of the tool is described by\n\"scripts\", which for now reside on the server, but which we plan to\nallow users to provide as part of the API. Scripts have various\nparameters, such as the P-wave and S-wave velocities, and the bulk\ndensity of the rocks in the model, and it is these parameters that make\nup most of the data in the API call. Other parameters include the type\nand frequency of wavelet to use, and the computation method for the\nreflectivity (for example the Zoeppritz equations, or the Aki013Richards\napproximation). The app has no user interface to speak of, only a web\nAPI. It is licensed under the Apache 2 license and can be found `on\nGitHub <https://github.com/agile-geoscience/modelr>`__. We are running\nan instance of our app on a \"T1.micro\" `Amazon EC2\ninstance <http://aws.amazon.com/ec2/>`__ running Ubuntu.\n\nProprietary front-end\n---------------------\n\nThe commercial, proprietary front end is a Python web app that lives in\nthe `Google App Engine <https://developers.google.com/appengine/>`__\nwalled garden. This app, which uses the `Twitter Bootstrap\nframework <http://getbootstrap.com/>`__, is serving at\n`modelr.io <https://www.modelr.io/>`__ and provides a user object in\nwhich a geoscientist can save rocks and scenarios consisting of a script\nand all its parameters. We chose App Engine for its strong\ninfrastructure, good track record, and the easy availability of tools\nlike the datastore, memcache, login, and so on. We also host support\nchannels and materials through this front end, which has a very\nlightweight \"demo\" mode, and otherwise requires a $9/month subscription\nto use, handled by `Stripe <https://stripe.com/ca>`__. This necessitated\nserving both the front and back ends over HTTPS, something we wanted to\ndo anyway, because of industry mistrust of the cloud.\n\nSummary\n-------\n\nSome of the things we picked up along the way:\n\n-  We started with a strong need of our own, so had clear milestones\n   from day 1.\n-  We left the project alone for months, but good documentation and\n   GitHub meant this was not a problem.\n-  Sprinting with a professional developer at the start meant less\n   thrashing later.\n-  The cloud landscape is exciting, but it's easy to be distracted by\n   all the APIs. Keeping it simple is a constant struggle.\n-  Pushing through Xeno's paradox to get to a live, public-facing app\n   took stamina and focus.\n-  There's nothing like having other users to get you to up your coding\n   game.\n\nWe hope that by telling this story of the early days of a commercial\nscientific web application, built by a bunch of consulting scientists in\nNova Scotia, not a tech startup in San Francisco, we can speed others\nalong the path to creating a rich ecosystem of new geoscience tools and\nweb APIs.\n",
  "duration": null,
  "id": 2816,
  "language": "eng",
  "quality_notes": "",
  "recorded": "2014-07-10",
  "related_urls": [
    "http://aws.amazon.com/ec2/",
    "http://getbootstrap.com/",
    "https://developers.google.com/appengine/",
    "https://developers.google.com/chart/image/",
    "https://github.com/agile-geoscience/modelr",
    "https://stripe.com/ca",
    "https://www.modelr.io/"
  ],
  "slug": "the-road-to-modelr-building-a-commercial-web-app",
  "speakers": [
    "Matt Hall"
  ],
  "summary": "Lessons learned along the bumpy road from Python noob to an open source\ngeophysics web application, with a commercial web service front end.\n",
  "tags": [],
  "thumbnail_url": "https://i1.ytimg.com/vi/TgOk_3JEcwY/hqdefault.jpg",
  "title": "The Road to Modelr: Building a Commercial Web Application on an Open Source Foundation",
  "videos": [
    {
      "length": 0,
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=TgOk_3JEcwY"
    }
  ]
}
