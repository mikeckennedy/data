{
  "copyright_text": "Creative Commons Attribution license (reuse allowed)",
  "description": "Sphinx is a documentation generator used by the core Python\ndocumentation and numerous other projects in the Python ecosystem.\nSphinx supports cross- references between documentation sets via its\n\u2018intersphinx\u2019 extension; however, proper configuration is not always\nstraightforward, and cross- references can be finicky to craft\ncorrectly. This talk aims to demystify these riddles of intersphinx\nusage.\n\n`Sphinx <http://www.sphinx-doc.org>`__ is a documentation generator used\nby the `core Python\ndocumentation <https://docs.python.org/3/library/index.html>`__ and\nnumerous other packages such as\n`SciPy <https://docs.scipy.org/doc/scipy/reference/>`__,\n`Django <https://docs.djangoproject.com/en/>`__, and\n`Blender <https://docs.blender.org/api/current/>`__. Sphinx supports\ncross- references across project boundaries via its `'intersphinx'\nextension <http://www.sphinx-doc.org/en/stable/ext/intersphinx.html#module-%20sphinx.ext.intersphinx>`__,\nwhich uses data from an objects inventory file generated by Sphinx when\nbuilding HTML docs. However, configuration of the intersphinx mappings\nto external documentation and correct composition of the\ncross-references to specific external objects can both be challenging to\nachieve, as the necessary reference syntax can vary in a non-obvious\nway. Related messages/warnings issued during the Sphinx build process,\nif enabled, are useful for identifying that a problem exists, but are\ntypically of minimal help in fixing the broken references. The `:any:\nrole <http://www.sphinx-%20doc.org/en/stable/markup/inline.html#role-any>`__\nis convenient for some cases, but is unhelpful when a given object name\nis ambiguous (e.g., with the Python `max()\nbuiltin <https://docs.python.org/3/library/functions.html#max>`__ versus\n`numpy.ndarray.max <https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.ndarray.max.html>`__).\n\nIn this talk, I will describe a (mostly) systematic approach to\nintersphinx configuration and usage, including locating the inventory\nfor an external docset; decoding and parsing the inventory to obtain the\ninformation needed for a functional intersphinx reference; and\nconstructing the cross-reference from this information. As I hope to\ndemonstrate, using intersphinx is quite easy, as long as you know where\nto look for key information, and what to do with it.\n",
  "duration": 1452,
  "language": "eng",
  "recorded": "2019-07-28T13:45:00",
  "related_urls": [
    {
      "label": "Conference schedule",
      "url": "https://www.pyohio.org/2019/events/schedule"
    }
  ],
  "speakers": [
    "Brian Skinn"
  ],
  "tags": [],
  "thumbnail_url": "https://i.ytimg.com/vi/CfInPYkbTZE/maxresdefault.jpg",
  "title": "The Riddle of the Intersphinx: Configuration and Cross-Reference Composition",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=CfInPYkbTZE"
    }
  ]
}
