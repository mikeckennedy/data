{
  "alias": "video/381/pycon-2011--algorithmic-generation-of-opengl-geom",
  "category": "PyCon US 2011",
  "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
  "description": "Algorithmic Generation of OpenGL Geometry\n\nPresented by Jonathan Hartley\n\nStarting from a basic 'hello world' OpenGL app, a simple and Pythonic\nmodel of 3D polyhedra is presented, with neat generators to convert\nthese into ctype arrays for OpenGL. Geometric algorithms then generate\nsome fun geometry, and these are compounded to produce successively more\ncomplex and interesting shapes.\n\nAbstract\n\nThe author's intent is to demonstrate that effective stylistic 3D\ngraphics can be achieved using surprisingly small amounts of code. This\nhopefully makes the topic amenable to 3D beginners, while possibly\nsuggesting some alternative approaches to those with 3D experience.\n\nTalk Outline\n\nThroughout, discussion of ideas and code dissection alternates with live\nanimated demos, at 60fps on very modest hardware.\n\n1.  Inspirations - Effective non-photo-realistic work in gaming, movies\n    and the demo scene. (1m)\n2.  A convenient & Pythonic way to model 3D polyhedra, and some neat\n    generators to convert these into OpenGL arrays at runtime. (7m)\n3.  Composition of polyhedra to create more complex shapes. (3m)\n4.  The resulting performance characteristics: What works well from\n    Python, and what doesn't. (2m)\n5.  Koch tetrahedron & tetrix, aka Sierpinski tetrahedron. (1m)\n6.  Surprisingly effective 3D models created from small bitmaps. (1m)\n7.  Automatic generation of trees, mazes, complex spaces. (3m)\n8.  Algorithmic modification of existing shapes, such as bevels,\n    geometric duals, and polyhedron stellation. (2m)\n9.  Shapes that morph: Rearranging vertices on the fly (5m)\n10. Questions (5m)\n\nThe ideas demonstrated in the talk are written against OpenGL 2.1, but\nwritten in a 'mostly OpenGL 3' style, using vertex buffer objects or\nvertex arrays.\n\nThe demo code uses pyglet to create a window and handle GUI events, and\nuses PyOpenGL for the majority of OpenGL calls, since it provides a more\nfriendly and Pythonic interface. In the performance-sensitive inner\nrender loop, however, I use pyglet's slightly more bare-bones OpenGL\nbindings.\n\nHowever, the majority of the talk focuses on the manipulation of\nabstract data structures to represent geometry, which is not affected by\nthese or other OpenGL library choices.\n\nThis is a substantially improved version of the talk 'Flying High:\nHobbyist OpenGL from Python', previously presented at EuroPython 2010.\n",
  "duration": null,
  "id": 381,
  "language": "eng",
  "quality_notes": "",
  "recorded": "2011-03-11",
  "slug": "pycon-2011--algorithmic-generation-of-opengl-geom",
  "speakers": [
    "Jonathan Hartley"
  ],
  "summary": "",
  "tags": [
    "3d",
    "opengl",
    "pycon",
    "pycon2011",
    "pyglet",
    "pyopengl"
  ],
  "thumbnail_url": "https://archive.org/services/img/pyvideo_381___algorithmic-generation-of-opengl-geometry",
  "title": "Algorithmic Generation of OpenGL Geometry",
  "videos": [
    {
      "type": "archive.org",
      "url": "https://archive.org/details/pyvideo_381___algorithmic-generation-of-opengl-geometry"
    }
  ]
}
