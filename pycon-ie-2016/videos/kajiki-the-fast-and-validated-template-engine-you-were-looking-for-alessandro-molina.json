{
  "description": "Being dissatisfied with some of the constraints and complex usage of\nGenshi, the TurboGears2 team started working on an alternative that\ncould solve Genshi speed issues, complex inheritance system and be\nbackward compatible with genshi templates. This is what lead to the\ncreation of the Kajiki template engine.\n\nThe talk will cover:\n\n- Comparison on the major template engines available in python to\n  showcase what's special in Kajiki (validated, xml based) what was\n  special in Genshi (also lazy evaluated)\n- What's a validated template engine and why it's good to have one.\n- How Kajiki works, showcase kajiki syntax, it's performances and how\n  to use it in any python project.\n- Why Kajiki is fast, code generation applied and how to write a code\n  generation template engine like Kajiki and Jinja2 (showcase a simple\n  50 lines of code template engine that uses code generation).\n",
  "duration": 1456,
  "language": "eng",
  "recorded": "2016-11-06",
  "speakers": [
    "Alessandro Molina"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/E59U9M2NQMk/hqdefault.jpg",
  "title": "Kajiki, the fast and validated Template Engine your were looking for",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=E59U9M2NQMk"
    }
  ]
}
