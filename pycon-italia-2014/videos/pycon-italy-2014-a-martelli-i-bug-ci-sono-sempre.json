{
  "description": "Se scrivi programmi innovativi, o ai limiti delle tue abilit\u00e1... o anche in caso contrario... i bug, nel tuo codice, ci saranno sempre. Ho molta esperienza a combinare bug, e quindi a scoprirli e rimediarli. A scuola non s'insegna come dar la caccia ai bug, quando t'insegnano programmazione e informatica... quindi, spiego quali atteggiamenti e capacit\u00e1 aiutano a minimizzare i bug, trovarli, rimediarli, assicurare che non tornino mai pi\u00fa, e distribuire le correzioni agli utenti del programma.\n\nIn questo talk descrivo come iniziare a cercare i dannati bug, dove preferiscono nascondersi, come il tuo cervello t'imbroglia (rendendo pi\u00fa difficile trovarli), e le procedure che aiutano ad evitarli (o almeno a trovarli molto presto). Testing, pair programming, code reviews, l'open source (\"dati abbastanza occhi, tutti i bug sono facili da vedere\"), quando usare un programma bug-tracker, sono fra gli argomenti considerati.\n\nDi tutti i consigli pratici nel tak, il piu importante: una volta confermata l'esistenza di un bug, mai cominciare a \"ripararlo\" fino a quando hai riprodotto il bug in un unit-test. Spesso questo compito ti stupisce, rivelando che il bug \u00e9 altrove da dove pensavi - e comunque, scrivere il test, assicurarsi che non passa, riparare il codice, assicurarsi che adesso il test passa -- e lasciare il test (piccolo, semplice, veloce) per sempre nella tua suite di unit-test, \u00e9 l'unico modo di assicurarsi che il bug non torni a farsi vivo senza essere notato (lo fanno, lo fanno, fidati...!). Alcuni spingono il concetto anche pi\u00fa avanti e applicano tecniche \"test driven\" o \"behavior driven\" -- lungi dall'essere cattive idee, se non danneggiano la tua produttivit\u00e1.\n\nMolti bug tendono a concentrarsi in piccole parti del codice -- in quelle che usano concetti troppo avanzati, in intricati alberi di decisioni booleane, o in quelle dove l'iniziale comprensione del problema (e quindi l'architettura per affrontarlo) era imperfetta. Se scopri dove sei stato \"troppo furbo per il tuo bene\", devi semplificare quelle parti del codice. Come dice Kernighan, \"Il debug \u00e9 due volte pi\u00fa difficile che inizialmente scrivere il programma stesso. Quindi se sei il pi\u00fa furbo possibile quando lo scrivi, come mai potrai fare a debuggarlo?\"",
  "duration": 3891,
  "language": "ita",
  "recorded": "2014-05-23",
  "speakers": [
    "Alex Martelli"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/_Bx2JVolDKQ/hqdefault.jpg",
  "title": "I bug ci sono sempre...",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=_Bx2JVolDKQ"
    }
  ]
}