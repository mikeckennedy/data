{
  "abstract": "Apache Arrow's promise was to reduce the (serialization & copy) overhead\nof working with columnar data between different systems. Using the\nlatest Pandas release and Arrow's ability to share memory between the\nJVM and Python as ingredients, we demonstrate that Arrow can fulfill\nthis bold statement. The performance benefits of this will be shown\nusing a typical data engineering use-case that produces data in the JVM\nand then passes it on to a Python-based machine learning model.\n\n*Tags:* Algorithms, Big Data, Data Science, Parallel Programming\n\nScheduled on `thursday 14:50 </schedule/#thu-14:50-media>`__ in room\nmedia\n",
  "copyright_text": null,
  "description": "Apache Arrow established a standard for columnar in-memory analytics to\nredefine the performance and interoperability of most Big Data\ntechnologies in early 2016. Since then implementations in Java, C++,\nPython, Glib, Ruby, Go, JavaScript and Rust have been added. Although\nApache Arrow (``pyarrow``) is already known to many Python/Pandas users\nfor reading Apache Parquet files, its main benefit is the cross-language\ninteroperability. With feather and PySpark, you can already benefit from\nthis in Python and R/Java via the filesystem or network. While they\nimprove data sharing and remove serialization overhead, data still needs\nto be copied as it is passed between processes.\n\nIn the 0.23 release of Pandas, the concept of ExtensionArrays was\nintroduced. They allow the extension of Pandas DataFrames and Series\nwith custom, user- defined typed. The most prominent example is\n``cyberpandas`` which adds an IP dtype that is backed by the appropriate\nrepresentation using NumPy arrays. These ExtensionArrays are not limited\nto arrays backed by NumPy but can take an arbitrary storage as long as\nthey fulfill a certain interfaces. Using Apache Arrow we can implement\nExtensionArrays that are of the same dtype as the built-in types of\nPandas but memory management is not tied to Pandas' internal\nBlockManager. On the other hand Apache Arrow has a much more wider set\nof efficient types that we can also expose as an ExtensionArray. These\ntypes include a native string type as well as a arbitrarily nested types\nsuch as ``list of \u2026`` or ``struct of (\u2026, \u2026, \u2026)``.\n\nTo show the real-world benefits of this, we take the example of a data\npipeline that pulls data from a relational store, transforms it and then\npasses it into a machine learning model. A typical setup nowadays most\nlikely involves a data lake that is queried with a JVM based query\nengine. The machine learning model is then normally implemented in\nPython using popular frameworks like CatBoost or Tensorflow.\n\nWhile sometimes these query engines provide Python clients, their\nperformance is normally not optimized for large results sets. In the\ncase of a machine learning model, we will do some feature\ntransformations and possibly aggregations with the query engine but feed\nas many rows as possible into the model. This will lead then to result\nsets that have above a million rows. In contrast to the Python clients,\nthese engines often come with efficient JDBC drivers that can cope with\nresult sets of this size but then the conversion from Java objects to\nPython objects in the JVM bridge will slow things down again. In our\nexample, we will show how to use Arrow to retrieve a large result in the\nJVM and then pass it on to Python without running into these\nbottlenecks.\n",
  "duration": 1577,
  "language": "eng",
  "recorded": "2018-10-25",
  "related_urls": [
    {
      "label": "Conference schedule",
      "url": "https://de.pycon.org/schedule/"
    }
  ],
  "speakers": [
    "Uwe L. Korn"
  ],
  "tags": [
    "Algorithms",
    "Big Data",
    "Data Science",
    "Parallel Programming"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/xW7IOaQvDsU/maxresdefault.jpg",
  "title": "Fulfilling Apache Arrow's Promises: Pandas on JVM memory without a copy",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=xW7IOaQvDsU"
    }
  ]
}
