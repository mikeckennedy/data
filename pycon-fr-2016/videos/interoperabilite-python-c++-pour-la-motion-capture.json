{
  "description": "Notre compagnie, \"Dynamixyz\", d\u00e9veloppe des logiciels pour les studios de production de films, de jeux vid\u00e9os et d'effets sp\u00e9ciaux. Nous nous sp\u00e9cialisons dans la \"motion capture\" faciale: capter avec pr\u00e9cision les mouvements d'acteurs r\u00e9els sur des vid\u00e9os et transf\u00e9rer ces mouvements afin d'animer les visages de personnages virtuels. Sous le capot, on retrouve un m\u00e9lange de techniques de traitement d'image, de vision par ordinateur, d'image de synth\u00e8se et de maths. Essentiellement des maths. Dans ce petit monde l\u00e0, en g\u00e9n\u00e9ral, le C++ r\u00e8gne en ma\u00eetre. \u00c9x\u00e9cuter des algorithmes math\u00e9matiques de traitement et d'optimisation sur des donn\u00e9es tels que des maillages 3D et des s\u00e9quences d'images requiert en effet un maximum d'efficacit\u00e9 dans les calculs et de la maitrise des ressources hardware utilis\u00e9es (M\u00e9moire, CPU). Notre bon C++ traine toutefois son lot d'inconv\u00e9nients: verbeux, compil\u00e9 et peu flexible, son utilisation limite la vitesse de d\u00e9veloppement et d'exploration de nouveaux algorithmes, sans parler des nombreux pi\u00e8ges dans lesquels tout d\u00e9vloppeur C++, m\u00eame exp\u00e9riment\u00e9, est s\u00fbr de tomber. Si le C++ reste indispensable \u00e0 certain endroits critiques de nos algorithmes, Python est un bien meilleur outil pour explorer, combiner, organiser, tester et d\u00e9bugger nos algorithmes. A l'usage, nous avons converg\u00e9 vers des pratiques de d\u00e9veloppement o\u00f9 nous allions Python et C++ pour profiter du meilleur des deux mondes: rapidit\u00e9 et d\u00e9terminisme du C++ pour les coeurs de calculs, flexibilit\u00e9 et richesse syntaxique du Python pour la conception et l'organisation haut-niveau des programmes. C'est avec plaisir et enthousiasme que nous partagerions nos pratiques d'interop\u00e9rabilit\u00e9 entre Python et C++, ses avantages et limitations, et illustrer ces propos par des exemples concrets et des jolies images issues de certains de nos projets. Demo reel de Dynamixyz: https://youtu.be/1WSneAhR5oA Note de l'\u00e9quipe d'organisation : captation vid\u00e9o non autoris\u00e9e par l'intervenant.e.",
  "recorded": "2016-10-16",
  "language": "fra",
  "duration": 1497520,
  "related_urls": [
    {
      "label": "Conference schedule",
      "url": "https://www.pycon.fr/2016/pages/programme.html"
    },
    {
      "label": "talk slides",
      "url": "https://pycon.fr/2016/videos/interoperabilite-python-c-pour-la-motion-capture-et-lanimation-faciale.html"
    }
  ],
  "speakers": [
    "Nicolas Stoiber",
    "Vincent Barrielle"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/G0SmxqsfShI/maxresdefault.jpg",
  "title": "Interop\u00e9rabilit\u00e9 Python/C++ pour la motion capture et l'animation faciale",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=G0SmxqsfShI"
    },
    {
      "type": "webm",
      "url": "https://dl.afpy.org/pycon-fr-16/Interop%C3%A9rabilit%C3%A9%20Python-C%2B%2B%20pour%20la%20motion%20capture%20et%20l%27animation%20faciale.webm",
      "size": 215156082
    }
  ]
}
