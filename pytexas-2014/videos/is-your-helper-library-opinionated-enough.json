{
  "alias": "video/3158/is-your-helper-library-opinionated-enough",
  "category": "PyTexas 2014",
  "copyright_text": "CC-BY",
  "description": "It's a constant debate.\n\nHow do you build a helper library?\n\nAt one end of the spectrum we have Runscope CEO John Sheehan who thinks\nthat helper libraries are evil and shouldn't exist at all. At the other\nwe find helper libraries that don't look or smell anything like the API.\nAnd somewhere in the middle we have helper libraries that are so close\nto the API itself that they are nothing more than a thin veneer.\n\nWhich is better? Who\u2019s right? The real question to me is how idiomatic\nshould a helper library be? Should a Django library make a Django\ndeveloper feel comfortable, or should she have to read the API docs to\nunderstand how it works? Should a Python library look RESTful, or should\nit look like a hierarchy of classes?\n\nAt our company, we maintain two libraries. They both have advantages and\ndisadvantages, they appeal to different developers, and sometimes even\nthe same developer at different times.\n",
  "duration": 1500,
  "id": 3158,
  "language": "eng",
  "quality_notes": "",
  "recorded": "2014-10-04",
  "slug": "is-your-helper-library-opinionated-enough",
  "speakers": [
    "Paul Murphy"
  ],
  "summary": "",
  "tags": [],
  "thumbnail_url": "https://archive.org/services/img/pyvideo_3158___Is_your_helper_library_opinionated_enough",
  "title": "Is your helper library opinionated enough?",
  "videos": [
    {
      "type": "archive.org",
      "url": "https://archive.org/details/pyvideo_3158___Is_your_helper_library_opinionated_enough"
    },
    {
      "length": 0,
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=XwtAZ34H3rE"
    }
  ]
}
