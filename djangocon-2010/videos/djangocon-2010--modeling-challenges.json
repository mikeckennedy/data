{
  "alias": "video/42/djangocon-2010--modeling-challenges",
  "category": "DjangoCon 2010",
  "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
  "description": "How would you model players, umpires and coaches in baseball data when\nthe same person can switch roles over the course of their life? How\nabout servers in racks with power boards attached (and cords running\nacross the room to remote boards)? Come along to see one approach to\ncreate minimal and well- performing models for such real-life\nsituations.\n\nAbstract\n\nThe slightly over-simplified but useful rule of thumb when creating\ndatabase schema is \u201cnormalize until it hurts, [then] denormalize until\nit works.\u201d If only people didn\u2019t skip the first step so often. Using a\ndata modeling layer, such as Django's models, doesn't absolve the system\narchitects from the need to create good design. It also doesn't require\nthem to do so, since you can get away with a lot of sub-optimality with\nmany data sets.\n\nThe real difficulty here, though, is that the trade-off between\ntext-book ideal modeling and easy to use is difficult to judge and takes\npractice to develop.\n\nThis talk will walk some interesting cases of model design that I've\nencountered recently. I'll explain how I approached the problem and what\nwe ended up with. These will include:\n\n-  Modeling people who might simultaneously play different roles in the\n   system. For example, a person who was a baseball player and then\n   became a coach \u2014 each role has different attributes attached to it.\n-  Modeling what appears to be a triangular dependency relationship with\n   minimal redundancy in the data description and without needing really\n   long query filters to access things.\n-  Handling date ranges (or other measured data) of different degrees of\n   accuracy and precision.\n\nThis won't be a talk on theoretical database design. Rather, concrete\nexamples of creating such designs and guiding the decisions by what\nmight work best in the final Django code. Hopefully, by listening to one\nperson's approach (mine!), people faced with similar challenges will\nhave another possible attack method in their toolbox.\n",
  "duration": null,
  "id": 42,
  "language": "eng",
  "quality_notes": "",
  "recorded": "2010-09-08",
  "slug": "djangocon-2010--modeling-challenges",
  "speakers": [
    "Malcolm Tredinnick"
  ],
  "summary": "",
  "tags": [
    "djangocon",
    "djangocon2010",
    "model"
  ],
  "thumbnail_url": "https://archive.org/services/img/pyvideo_42___modeling-challenges",
  "title": "Modeling challenges",
  "videos": [
    {
      "type": "archive.org",
      "url": "https://archive.org/details/pyvideo_42___modeling-challenges"
    }
  ]
}
