{
  "description": "Given the dynamic nature of Python, some bugs tend to creep in our\ncodebases. Innocents NameErrors or hard-to-find bugs with variables used\nin a closure, but defined in a loop, they all stand no chance in front\nof Pylint (http://pylint.org/).\n\nIn this talk, I\u2019ll present one of the oldest static analysis tools for\nPython, with emphasis on what it can do to understand your Python code.\nPylint is both a style checker, enforcing PEP 8 rules, as well as a code\nchecker in the vein of pyflakes and pychecker, but its true power isn\u2019t\nalways obvious in the eye of beholder, especially when it's hidden\nthrough its verbosity. Interpreting its results can be a daunting task,\nbut there are tricks which can be used to improve its user experience,\nsuch as enabling only structural checking with the -E flag or disabling\nunwanted category checks.\n\nPylint can detect simple bugs such as unused variables and imports, but\nit can also detect more complicated cases such as invalid arguments\npassed to functions, it understands the method resolution order of your\nclasses, generators, contexts managers and what special methods aren\u2019t\nimplemented correctly.\n\nStarting from abstract syntax trees, we\u2019ll go through its inference\nengine and we\u2019ll see how Pylint understands the logical flow of your\nprogram and what sort of type hinting techniques are used to improve its\ninference, including PEP 484 type hints. Pylint's roadmap includes\nbetter understanding of Python code, by improving its flow control\nanalysis, escape analysis, understanding metaclasses and descriptors and\nhaving a better type checker, as well as improving the user experience,\nby reducing the number of false positives it currently has. As a bonus,\nI\u2019ll show how it can be used to help you port your long-forgotten\nlibrary to Python 3, using its new \u2013py3k mode, which emits warnings\nregarding Python 3 compatibility.\n\nThe participants should have a basic understanding of Python. No other\nprerequisite is necessary, since the other concepts will be explained\nduring the talk.\n\nThe following concepts will be explained during this talk:\n\n-  abstract syntax trees\n-  static analysis and why using static analysis for your code\n-  what is inference and what forms an inference engine",
  "duration": 1737,
  "language": "eng",
  "recorded": "2015-09-18",
  "speakers": [
    "Claudiu Popa"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/4Nmvfqcum6c/hqdefault.jpg",
  "title": "Analyzing Python with Pylint",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=4Nmvfqcum6c"
    }
  ]
}
