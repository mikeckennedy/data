{
  "abstract": "Recursion has an intimidating reputation for being the advanced skill of\ncoding sorcerers. But in this tutorial we look behind the curtain of\nthis formidable technique to discover the simple ideas under it.\n\nIf you've ever said or thought the words \"recursion is confusing\", this\ntutorial is for you.\n\nThrough hands-on exercises in the interactive shell, we'll answer the\nfollowing questions:\n\n-  What is recursion, and when is it a good idea and bad idea to use it?\n-  What are all the confusing ways that recursion is commonly taught?\n-  What's a stack, and what's the call stack?\n-  What are stack overflows, and how do we avoid them?\n-  Do some problems require recursion? How do I transform recursive code\n   into iterative code, and vice versa?\n-  What are some common recusive problems in whiteboard coding\n   interviews?\n-  What is memoization and tail call optimization?\n-  How do I draw that cool-looking fractal artwork using recursion?\n\nWe'll cover a number of common recursive algorithms:\n\n-  Factorial and Fibonacci calculation\n-  Exponent calculation\n-  The Towers of Hanoi\n-  The flood fill algorithm\n-  Binary search\n-  Generating permutations and combinations\n\nThis tutorial is for a wide range of developers. Beginners who only\nunderstand the basics of Python will be able to follow along.\nExperienced developers who have hoped no one would notice the\nrecursive-coding gap in their knowledge will be able to breath with\nrelief after taking this tutorial. All that is required is a willingness\nto learn, and a willingness to have the willingness to learn, and a\nwillingness to have the willingness to have the willingness to learn,\nand... so on.\n\nSetup Instructions\n------------------\n\nhttps://inventwithpython.com/blog/2018/08/24/pyohio-2018-recursion-tutorial/\n",
  "copyright_text": "Creative Commons Attribution license (reuse allowed)",
  "description": "Between unintelligible algorithms and beautiful fractal artwork,\nrecursion has an intimidating and even mystical reputation. But the\nunderlying ideas behind it are simple. In this tutorial we get a solid\nfoundation of recursive code, and run through several examples in the\ninteractive shell. If you've ever said or thought the words \"recursion\nis confusing\", this tutorial is for you.\n",
  "duration": 5965,
  "language": "eng",
  "recorded": "2018-07-28",
  "related_urls": [
    {
      "label": "Conference schedule",
      "url": "https://www.pyohio.org/2018/schedule/"
    }
  ],
  "speakers": [
    "Al Sweigart"
  ],
  "tags": [],
  "thumbnail_url": "https://i.ytimg.com/vi/L7x0OUN1Aws/maxresdefault.jpg",
  "title": "A Beginner's Guide to Tackling Recursion",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=L7x0OUN1Aws"
    }
  ]
}
