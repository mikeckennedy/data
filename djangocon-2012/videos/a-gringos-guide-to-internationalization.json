{
  "alias": "video/1379/a-gringos-guide-to-internationalization",
  "category": "DjangoCon 2012",
  "copyright_text": "Creative Commons Attribution license (reuse allowed",
  "description": "There's often a bubble in the English-speaking programming world that\nthe entire internet runs on English. Our Top-level domains are shortened\nenglish words. Our programming languages--Python in particular--try to\nemulate English words and grammar.\n\nFirmly in place in this world for many years, my first attempt to\ntranslate a pre-existing site came with a high sticker shock of nuanced\ndifficulty. This talk covers all the lessons I learned in taking a\nfully-fleshed web app with no translation (and a programmer with no\ntranslation experience) to being completely translated.\n\nTalk Overview\n=============\n\n1. Introduction to Translation\n\n   1. Overview of gettext\n   2. Brief history of a translation\n   3. Add gettext calls\n   4. ``django-admin.py makemessages``\n   5. Ship po file to translation service\n   6. Receive file back\n   7. Compile\n   8. Fin\n   9. gettext vs gettext\\_lazy\n\n2. Batteries Included\n\n   1. gettext Python calls\n   2. Middleware\n   3. template tags\n   4. trans vs. blocktrans\n   5. Anti-patterns of the battery included use.\n   6. Heavy whitespace in blocktrans\n   7. Monster-sized translations\n\n3. The best laid plans of mice and men...\n\n   1.  Problems that get in the way of A history of a translation.\n   2.  Realize half the site is still untranslated\n   3.  Edit out the translations you already had translated to avoid\n       re-curring costs\n   4.  Have the product adjust so two words change\n   5.  Realize common text that's in the database\n   6.  Fin?\n   7.  Patterns and tools to help\n   8.  ``poxx.py`` and the idea of a 'canonical' po file.\n   9.  ``dbgettext``\n   10. Wholly-translated template files (translate\\_include,\n       trans\\_render)\n\n4. Advanced Translation Technique\n\n   1.  While undocumented, translation backend is pretty darn flexible\n       and the source code is a treasure trove to make 'impossible' use\n       cases not too bad.\n   2.  Overview of how the translation service works behind the scenes\n   3.  ``_translation`` thread local\n   4.  Merged translations (root->app->default)\n   5.  Sessions vs. Accept-Language\n   6.  Middleware and Context processors\n   7.  Example of advanced translation code: Multi-tenancy translation.\n   8.  Translating some sites, not translating others\n   9.  Translating Site A one way, Site B another\n   10. Using an English translation for duct-tape and profit.\n\n5. Why Django's i18n sucks.\n\n   1. In the vein of the \"Django Sucks\" Key note. It doesn't really, but\n      it could use some changes--from minor to major.\n   2. Why .po Files are archaic and limited.\n   3. What we can do to improve for 1.5 and beyond.\n\n\n",
  "duration": null,
  "id": 1379,
  "language": "eng",
  "quality_notes": "",
  "recorded": "2012-09-04",
  "slug": "a-gringos-guide-to-internationalization",
  "speakers": [
    "Jacob Burch"
  ],
  "summary": "Coming from a speaker who escaped a notion to \"why would we need to\ntranslate?\" this talk aims to show what actually goes into translating a\nwebsite or app using Django's Internationalization tools. Covered will\nbe an overview of batteries included, best practices and anti-patterns\nin using them, and some third party tools to help make your life\nescaping the myth of a Lingua Franca easier.\n",
  "tags": [
    "django",
    "internationalization"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/j2ZHZWfx60Y/hqdefault.jpg",
  "title": "A Gringo's Guide to Internationalization",
  "videos": [
    {
      "length": 0,
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=j2ZHZWfx60Y"
    }
  ]
}
