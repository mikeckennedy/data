{
  "alias": "video/3041/mobile-games-to-the-cloud-with-python",
  "category": "EuroPython 2014",
  "copyright_text": "http://creativecommons.org/licenses/by/3.0/",
  "description": "The Talk\n^^^^^^^^\n\nThis talk has two goals. Showing the audience the lessons we learned\nduring a project which moved a simple mobile game to a server backend is\nour first intention. In addition to that we want to describe how such a\nsystem works in a real life example, to show which problems and which\nrequirements arise in its creation. When the audience leaves the talk\nthey will know how a real-life mobile game uses Python for powering the\nbackend servers.\n\nThe Problem\n^^^^^^^^^^^\n\nMost of the game development for mobile devices is focused on running\nthe game on the device. The game designers and game developers play a\nprimary role in creating the product. The server backend plays a\nsupporting role providing a multiplayer or social experience to the\nusers. Indeed, at Nanobit Ltd., things were also done that way. We had a\nsmall Python infrastructure built around Django which provided a small\nportion of multiplayer experience for the players. The majority of\ndevelopment was still focused on playing the game on the device. That\nway of thinking was put to test when we decided to center our future\ngames around the multiplayer experience. Due to the fact that our\ninfrastructure at the time was not enough for what we had in mind, we\nhad to start from scratch. The decision was made to use Python as the\ncenter of our new infrastructure.\n\nIn order to achieve it, a server backend was needed that would allow the\ngame to be played \u201cin the cloud\u201d with the device only being a terminal\nto the player. Most of the game logic would have to be processed in the\ncloud which meant that each player required a constant connection to the\nbackend and with over 100.000 players in our previous games that\npresented a challenge. How to build an infrastructure which can support\nthat? Since every user action had to be sent to the backend how to\nprocess thousands of them quick enough? Those problems were big and were\njust the start.\n\nThe Solution\n^^^^^^^^^^^^\n\nThe design of the backend lasted for a couple of months and produced a\nscalable infrastructure based on \u201cworkers\u201d developed in Python, \u201cweb\nservers\u201d that use Tornado and a custom message queue which connected the\ntwo. The storage part is a combination of Riak and Redis. Since the\nbackend is scalable new workers and new web servers had to be deployed\neasily so an orchestration module was build using Fabric. The\nscalability and launching of new workers and web servers was achieved\nusing Docker for creation and deployment of containers. Each container\npresents one module of the system (worker, web server, queue). The end\nresult can now support all of our future games and only requires the\ngame logic of each game to be added to the workers.\n\nThe Technologies\n^^^^^^^^^^^^^^^^\n\n-  Python for coding the game logic, web servers. More than 90% of the\n   system was written in Python.\n-  Fabric\n-  SQLAlchemy\n-  Riak\n-  Redis\n-  ZeroMQ\n-  nginx\n-  Docker\n-  Websockets\n-  AWS\n\nThe Lessons Learned\n^^^^^^^^^^^^^^^^^^^\n\n-  How to tune the backend to handle the increasing number of active\n   players.\n-  How to tackle the problem of frequent connection dropping and\n   reachability issues of poor mobile device Internet connection in\n   Tornado with a little help of Redis.\n-  How to prevent users from trying to outsmart the system by denying\n   illegal moves.\n-  How to enable game profile syncing and live updating.\n-  Improving the performance of workers by prioritizing data being\n   stored to databases (Riak, SQL).\n-  New issues and lessons show up all the time so there will definitely\n   be more of them by the time of the conference.\n\nBasic Outline\n^^^^^^^^^^^^^\n\n1. Intro (5 min)\n\n   1. Who are we?\n   2. How was Python used in our previous games\n   3. Why we decided to change it all\n\n2. Requirements (6 min)\n\n   1. What was the goal of creating the game backend\n   2. Why was Python our first choice\n\n3. Python backend (14 min)\n\n   1. The architecture of the backend\n   2. Which technologies did we use and how were they connected together\n   3. How the backend handles the game logic\n   4. Lessons learned\n\n4. Questions & Answers (5 min)\n\n",
  "duration": null,
  "id": 3041,
  "language": "eng",
  "quality_notes": "",
  "recorded": "2014-07-22",
  "slug": "mobile-games-to-the-cloud-with-python",
  "speakers": [
    "Darko Roni\u0107",
    "Mislav Stipetic"
  ],
  "summary": "When a mobile game development company decides to switch to a more cloud\nbased development it is faced with obstacles different from those it's\nused to on mobile devices. This talk explains how Python provided us\nwith most of the infrastructure for this task and how a Python game\nbackend was built as a result.\n",
  "tags": [],
  "thumbnail_url": "https://i.ytimg.com/vi/wWypp2KexGs/hqdefault.jpg",
  "title": "Mobile Games to the Cloud With Python",
  "videos": [
    {
      "length": 0,
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=wWypp2KexGs"
    }
  ]
}
