{
  "copyright_text": "Creative Commons Attribution license (reuse allowed)",
  "description": "No s\u00f3lo Python logr\u00f3 penetrar fuertemente en el mundo cient\u00edfico, sino que adem\u00e1s avanza a mucha velocidad dentro de ese \u00e1mbito debido a que es muy *user friendly* y permitir a los usuarios desarrollar programas r\u00e1pidamente. Las debilidades de Python (principalmente ser considerablemente lento y sin capacidad de threading en su implementaci\u00f3n m\u00e1s popular, cPython) pueden ser resueltas. Presentamos los distintos pasos para lograrlo, manteniendo un ambiente que, para el usuario, se ve completamente pythonico\n\nLa programaci\u00f3n de alto desempe\u00f1o requiere de un uso exhaustivo de todas las capacidades del hardware disponible, por lo que trabajar en lenguajes como C o FORTRAN (incluso a veces directamente en ASM) se vuelve imperioso. En los \u00faltimos a\u00f1os, debido a su facilidad de desarrollo y uso, Python comenz\u00f3 a ganar terreno en el desarrollo de software cient\u00edfico, como lo demuestran librer\u00edas del estilo de NumPy. Sin embargo, implementar algoritmos costosos en tiempo computacional sigue siendo prohibitivo. En este trabajo mostramos t\u00e9cnicas para implementar estos algoritmos en C/FORTRAN y poder crear una interfaz con Python de modo tal que, para el usuario (y potencial desarrollador) se pueda utilizar como si fuera Python nativo.\n",
  "language": "spa",
  "recorded": "2018-11-24",
  "speakers": [
    "Pablo Alcain",
    "Cecilia Jarne",
    "Rodrigo Lugones",
    "Graciela Molina"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/oz2Xcn9udsw/hqdefault.jpg",
  "title": "La Computaci\u00f3n de Alto Desempe\u00f1o puede ser vers\u00e1til: comunicando C y FORTRAN con Python",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=oz2Xcn9udsw"
    }
  ]
}
