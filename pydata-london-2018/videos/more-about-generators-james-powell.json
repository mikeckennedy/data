{
  "abstract": "What originally made generators a compelling tool, and what makes them a\nuseful tool today for solving a certain class of problems?\n\nBeyond simple stream manipulation functions, how can generators fit into\nthe data scientist, computational scientist, and data engineer's\ntoolkit. What problems can they solve? What problems do they struggle\nsolving?\n\nAnd how can we look beyond the superficial features of generators to\ndiscover more powerful APIs and frameworks that might prove and novel?\n",
  "copyright_text": null,
  "description": "Generators were a compelling feature when added to Python 2.2 in\nseventeen years ago with PEP-255. When they were enhanced to become\ncoroutines with PEP-342, they gained additional capabilities for\nmodelling common problems.\n\nBut, surprisingly, we don't often see generators discussed as a core\ntool in the data scientist, computational scientist, and data engineer's\ntoolkit. Why not?\n",
  "duration": 2445,
  "language": "eng",
  "recorded": "2018-04-28",
  "related_urls": [
    {
      "label": "Conference schedule",
      "url": "https://pydata.org/london2018/schedule/"
    }
  ],
  "speakers": [
    "James Powell"
  ],
  "tags": [],
  "thumbnail_url": "https://i.ytimg.com/vi/m6asOJmfGpY/maxresdefault.jpg",
  "title": "More About Generators",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=m6asOJmfGpY"
    }
  ]
}
