{
  "copyright_text": "Standard YouTube License",
  "description": "The WSGI (Web Server Gateway Interface) specification for hosting Python web applications was created in 2003. Measured in Internet time, it is ancient. The oldest main stream implementation of the WSGI specification is mod_wsgi, for the Apache HTTPD server and it is over 10 years old.\n\nWSGI is starting to be regarded as not up to the job, with technologies such as HTTP/2, web sockets and async dispatching being the way forward. Reality is that WSGI will be around for quite some time yet and for the majority of use cases is more than adequate.\n\nThe real problem is not that we need to move to these new technologies, but that we aren't using the current WSGI servers to their best advantage. Moving to a new set of technologies will not necessarily make things better and will only create a new set of problems you have to solve.\n\nAs one of the oldest WSGI server implementations, Apache and mod\\_wsgi may be regarded as boring and not cool, but it is still the most stable option for hosting WSGI applications available. It also hasn't been sitting still, with a considerable amount of development work being done on mod\\_wsgi in the last few years to make it even more robust and easier to use in a development environment as well as production, including in containerised environments.\n\nIn this talk you will learn about many features of mod\\_wsgi which you probably didn't even know existed, features which can help towards ensuring your Python web application deployment performs to its best, is secure, and has a low maintenance burden.\n\nTopics which will be covered include:\n\n* Easy deployment of Python web applications using mod\\_wsgi-express.\n* Integration of mod_wsgi-express with a Django web application.\n* Using mod\\_wsgi-express in a development environment.\n* How to make use of mod\\_wsgi-express in a production environment.\n* Using mod_wsgi-express in a containerised runtime environment.\n* Ensuring consistency between development and production environments using warpdrive.\n* Using mod\\_wsgi-express to bootstrap a system Apache installation for hosting WSGI applications.\n* Why you should be using daemon mode of mod\\_wsgi and not embedded mode.\n* How to properly associate mod\\_wsgi with a Python virtual environment.\n* Building a robust deployment that can recover from misbehaving application code, backend services, or request overloading.\n* Using hooks provided by mod\\_wsgi to monitor the performance of your Python web application.\n\nIf you are a beginner, come learn why mod\\_wsgi is still a good option for deploying your Python web applications. If you are an old time user of mod\\_wsgi, find out about all the features you probably didn't know existed, revisit your current Python web application deployment and make it even better.",
  "duration": 1975,
  "language": "eng",
  "recorded": "2018-05-12",
  "related_urls": [
    {
      "label": "Conference schedule",
      "url": "https://us.pycon.org/2018/schedule/talks/"
    },
    {
      "label": "Conference slides (Github)",
      "url": "https://github.com/PyCon/2018-slides"
    },
    {
      "label": "Conference slides (SpeakerDeck)",
      "url": "https://speakerdeck.com/pycon2018"
    },
    {
      "label": "talk schedule",
      "url": "https://us.pycon.org/2018/schedule/presentation/89/"
    }
  ],
  "speakers": [
    "Graham Dumpleton"
  ],
  "tags": [
    "wsgi"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/CPz0s1CQsTE/maxresdefault.jpg",
  "title": "Secrets of a WSGI master.",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=CPz0s1CQsTE"
    }
  ]
}
