{
  "copyright_text": "Creative Commons Attribution license (reuse allowed)",
  "description": "`Cython <http://cython.org>`__ is not only a very fast and comfortable\nway to talk to native code and libraries, it is also a widely used tool\nfor speeding up Python code. The Cython compiler translates Python code\nto C or C++ code, and applies many static optimisations that make Python\ncode run visibly faster than in the interpreter. But even better, it\nsupports static type annotations that allow direct use of C/C++ data\ntypes and functions, which the compiler uses to convert and optimise the\ncode into fast, native C. The tight integration of all three languages,\nPython, C and C++, makes it possible to freely mix Python features like\ngenerators and comprehensions with C/C++ features like native data\ntypes, pointer arithmetic or manually tuned memory management in the\nsame code.\n\nThis talk by a core developer introduces the Cython compiler by\ninteractive code examples, and shows how you can use it to speed up your\nPython code. You will learn how you can profile a Python module and use\nCython to compile and optimise it into a fast binary extension module.\nAll of that, without losing the ability to run it through common\ndevelopment tools like static analysers or coverage test tools.\n",
  "duration": 2777,
  "language": "eng",
  "recorded": "2018-07-26",
  "related_urls": [
    {
      "label": "Conference schedule",
      "url": "https://ep2018.europython.eu/p3/schedule/ep2018/"
    }
  ],
  "speakers": [
    "Stefan Behnel"
  ],
  "tags": [],
  "thumbnail_url": "https://i.ytimg.com/vi/4xpeJYWvbuU/maxresdefault.jpg",
  "title": "Cython to speed up your Python code",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=4xpeJYWvbuU"
    }
  ]
}
