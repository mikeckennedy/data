{
  "copyright_text": "Creative Commons Attribution license (reuse allowed)",
  "description": "Math operations are discounted in the small where I/O dominates, yet gate compute costs in the large. Be it square or root, exponential or matrix ops, time/space efficacy matters for science. engineering, and machine learning. Julia provides right sizing for precision, accuracy, and performance. Julia's Type system, Just-in-Time, and Dispatch are introduced via REPL, IJulia, Juno, JuliaBox\n\n**Abstract**\n\nWhy is an alternative to Python needed for numerical work? Data Science (clustering) and Machine Learning (neural network activation functions) provide two good reasons to look forward to Julia 1.0. This talk is built on the just released version 0.6.\n\nCalculation, precision, storage, representation and graphing all need to be considered, especially at scale. Exponential and Matrix operations are prone to underflow, overflow and and accumulated rounding errors could lead to dire consequences. For abritrary precision values, it may take longer to display or transmit the result than to calculate it. Speed does matter when billions of flops are being done. Julia's clever common sense is indeed a \"A fresh approach to technical computing.\"\n\nA very brief recap language and version differences. While the focus is Julia, some compare and contrast with Python is appropriate.\n\nJulia's Type system, Just-in-Time, and Dispatch style are worth a good look. Graphing as well. GrElegance lurks above and under the hood.",
  "duration": 2810,
  "language": "eng",
  "recorded": "2017-07-06",
  "related_urls": [
    {
      "label": "schedule",
      "url": "https://pydata.org/seattle2017/schedule"
    }
  ],
  "speakers": [
    "en zyme"
  ],
  "tags": [],
  "thumbnail_url": "https://i.ytimg.com/vi/lJbXkz8vtRY/maxresdefault.jpg",
  "title": "Beginning Julia: Language and Landscape",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=lJbXkz8vtRY"
    }
  ]
}
