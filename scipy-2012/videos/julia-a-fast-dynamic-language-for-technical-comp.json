{
  "alias": "video/1204/julia-a-fast-dynamic-language-for-technical-comp",
  "category": "SciPy 2012",
  "copyright_text": "CC BY-SA",
  "description": "Julia is a dynamic language designed for technical applications and high\nperformance. Its design is based on a sophisticated but unobtrusive type\nsystem, type inference, multiple dispatch instead of class-based OO, and\na code generator based on LLVM. These features work together to run\nhigh-level code efficiently even without type declarations. At the same\ntime, the type system provides useful expressiveness for designing\nlibraries, enables forms of metaprogramming not traditionally found in\ndynamic languages, and creates the possibility of statically compiling\nwhole programs and libraries. This combination of high performance and\nexpressiveness makes it possible for most of Julia's standard library to\nbe written in Julia itself, with an interface to call existing C and\nFortran libraries.\n\nWe will discuss some ways that Python and Julia can interoperate, and\ncompare Julia's current capabilities to Python and NumPy.\n",
  "duration": null,
  "id": 1204,
  "language": "eng",
  "quality_notes": "",
  "recorded": "2012-07-18",
  "slug": "julia-a-fast-dynamic-language-for-technical-comp",
  "speakers": [
    "Jeff Bezanson"
  ],
  "summary": "",
  "tags": [
    "General"
  ],
  "thumbnail_url": "https://i3.ytimg.com/vi/VCp1jUgVRgE/hqdefault.jpg",
  "title": "Julia: A Fast Dynamic Language for Technical Computing",
  "videos": [
    {
      "type": "mp4",
      "url": "http://s3.us.archive.org/nextdayvideo/enthought/scipy_2012/Julia_A_Fast_Dynamic_Language_for_Technical_Computing.mp4?Signature=otqxhrYPHzksIHD27rcge7iww4c%3D&Expires=1346381386&AWSAccessKeyId=FEWGReWX3QbNk0h3"
    },
    {
      "length": 0,
      "type": "youtube",
      "url": "http://youtube.com/watch?v=VCp1jUgVRgE"
    }
  ]
}
