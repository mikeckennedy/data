{
  "alias": "video/1137/interoperability-from-python-to-clojure-and-the",
  "category": "EuroPython 2011",
  "copyright_text": "Standard YouTube License",
  "description": "Clojure is a modern Lisp dialect symbiotic with the Java Virtual Machine\nand designed for concurrency. Clojure is compiled to byte-code and yet\nis fully dynamic. It is very oriented towards functional programming and\nmanages state change in a controlled environment with software\ntransactional memory (STM). Since Clojure is a Lisp dialect, it retains\nthe code-as-data philosophy and has a powerful macro system\n\nUsing the Jython, an implementation of the Python programming language\nwritten in Java, it is possible to call Clojure from Python and call\nPython from Clojure, using the JVM as an interoperability platform.\n\nAfter a brief introduction of the main Clojure features, the\npresentation will show how Jython and Clojure can be used together.\n\nNo previous knowledge of Clojure (or Lisp) is assumed nor required.\n",
  "duration": null,
  "id": 1137,
  "language": "eng",
  "quality_notes": "",
  "recorded": "2011-07-13",
  "slug": "interoperability-from-python-to-clojure-and-the",
  "speakers": [
    "Enrico Franchi"
  ],
  "summary": "[EuroPython 2011] Enrico Franchi - 21 June 2011 in \"Track Lasagne\"\n",
  "tags": [
    "java",
    "jvm",
    "jython",
    "memory"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/jYhLqo4Mqbc/hqdefault.jpg",
  "title": "Interoperability: from Python to Clojure and the other way round",
  "videos": [
    {
      "length": 0,
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=jYhLqo4Mqbc"
    }
  ]
}
