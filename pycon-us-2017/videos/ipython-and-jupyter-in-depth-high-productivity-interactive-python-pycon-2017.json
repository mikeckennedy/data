{
  "description": "Description\n===========\n\nIPython and Jupyter provide tools for interactive computing that are\nwidely used in scientific computing, education, and data science, but\ncan benefit any Python developer.\n\nYou will learn how to use IPython in different ways, as:\n\n-  an interactive shell,\n-  a graphical console,\n-  a network-aware VM (Virtual machine) in GUIs,\n-  a web-based notebook combining code, graphics and rich HTML.\n\nWe will demonstrate how to deploy a custom environment with Docker that\nnot only contains multiple Python kernels but also a couple of other\nlanguages.\n\nObjectives\n==========\n\nAt the end of this tutorial, attendees will have an understanding of the\noverall design of Jupyter (and IPython) as a suite of applications they\ncan use and combine in multiple ways in the course of their development\nwork with Python and other programming languages. They will learn:\n\n-  Tricks from the IPython machinery that are useful in everyday\n   development,\n\n-  What high-level applications in Jupyter, the web-based notebooks, can\n   do and how these applications can be used.\n\n-  How to use IPython and Jupyter together so that they can be best used\n   for the problem at hand.\n\nPython Level\n============\n\nIntermediate\n\nDomain Level\n============\n\nIntroductory\n\nDetailed Abstract\n=================\n\nIPython started in 2001 simply as a better interactive Python shell.\nOver the last decade it has grown into a powerful set of interlocking\ntools that maximize developer productivity in Python while working\ninteractively.\n\nToday, Jupyter consists of an IPython kernel that executes user code,\nprovides many features for introspection and namespace manipulation, and\ntools to control this kernel either in-process or out-of-process thanks\nto a well specified communications protocol implemented over ZeroMQ.\nThis architecture allows the core features to be accessed via a variety\nof clients, each providing unique functionality tuned to a specific use\ncase:\n\n-  An interactive, terminal-based shell with capabilities beyond the\n   default Python interactive interpreter (this is the classic\n   application opened by the ``ipython`` command that many users have\n   worked with)\n\n-  A `web-based notebook <http://jupyter.org/>`__ that can execute code\n   and also contain rich text and figures, mathematical equations and\n   arbitrary HTML. This notebook presents a document-like view with\n   cells where code is executed but that can be edited in-place,\n   reordered, mixed with explanatory text and figures, etc. The notebook\n   provides an interactive experience that combines live code and\n   results with literate documentation and the rich media that modern\n   browsers can display:\n\n   .. figure:: http://jupyter.org/assets/jupyterpreview.png\n      :alt: Notebook screenshot\n\n      Notebook screenshot\n\nThe notebooks also allow for code in multiple languages allowing to mix\nPython with Cython, C, R and other programming languages to access\nfeatures hard to obain from Python.\n\nThese tools also increasingly work with languages other than Python, and\nwe renamed the language independent frontend components to *Jupyter* in\norder to make this clearer. The Python kernel we provide and the\noriginal terminal-based shell will continue to be called *IPython*.\n\nIn this hands-on, in-depth tutorial, we will briefly describe IPython's\narchitecture and will then show how to use the above tools for a highly\nproductive workflow in Python.\n\nThe materials for this tutorial are `available on a github\nrepository <https://github.com/ipython/ipython-in-depth>`__.\n",
  "duration": 11947,
  "recorded": "2017-05-18",
  "speakers": [
    "Matthias Bussonnier",
    "Mike Bright",
    "Min Ragan-Kelley"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/VQBZ2MqWBZI/hqdefault.jpg",
  "title": "IPython and Jupyter in Depth: High productivity, interactive Python",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=VQBZ2MqWBZI"
    }
  ]
}
