{
  "abstract": "Recently I got infected by the Cryptocurrency fever. I am especially\nexcited about Ethereum, a Turing complete Blockchain. This means in\ncontrast to Bitcoin whose Blockchain only stores currency transactions,\nthe Ethereum Virtual Machine can run entire programs.\n\nThere is one particular hook or catch when it comes to any program or\ncode that is deployed to the Ethereum Blockchain: Updating a contract or\nfixing errors is close to impossible. Hence, testing becomes even more\nimportant than in the good old *off chain* IT. The beauty of Unittesting\nin Ethereum? You can do it in **Python**.\n\nIn this talk I will give a brief introduction to the Ethereum\nBlockchain, how to write so called Smart Contracts in the programming\nlanguage Solidity, and how to perform Unittesting using the great\n`populus Python library <http://populus.readthedocs.io/en/latest/>`__.\n",
  "copyright_text": null,
  "description": "Ethereum is a Turing complete Blockchain. Instead of just processing\ntransactions like Bitcoin, the Ethereum Virtual Machine can run\nprograms. There is one catch regarding any code that is deployed: Fixing\nerrors is almost impossible. Hence, testing becomes incredibly\nimportant. The beauty of Unittesting in Ethereum? You can do it in\n*Python* and I will show you how.\n",
  "duration": 2474,
  "language": "eng",
  "recorded": "2018-07-07",
  "related_urls": [
    {
      "label": "Conference schedule",
      "url": "https://pydata.org/berlin2018/schedule/"
    }
  ],
  "speakers": [
    "Robert Meyer"
  ],
  "tags": [],
  "thumbnail_url": "https://i.ytimg.com/vi/sVxT11xJuC4/maxresdefault.jpg",
  "title": "Python Unittesting for Ethereum Smart Contracts or how not to create your own Cryptocurrency",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=sVxT11xJuC4"
    }
  ]
}
