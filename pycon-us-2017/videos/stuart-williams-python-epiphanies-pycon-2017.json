{
  "description": "This tutorial is for developers who've been using Python for a while and\nwould consider themselves at an intermediate level, but are looking for\na deeper understanding of the language. It focuses on how Python differs\nfrom other languages in subtle but important ways that are often\nconfusing, and it demystifies a number of language features that are\nsometimes misunderstood.\n\nIn many ways Python is very similar to other programming languages.\nHowever, in a few subtle ways it is quite different, and many software\ndevelopers new to Python, after their initial successes, hit a plateau\nand have difficulty getting past it. Others don't hit or perceive a\nplateau, but still find some of Python's features a little mysterious or\nconfusing. This tutorial will help deconstruct some common incorrect\nassumptions about Python.\n\nIf in your use of Python you sometimes feel like an outsider, like\nyou're missing the inside jokes, like you have most of the puzzle pieces\nbut they don't quite fit together yet, or like there are parts of Python\nyou just don't get, this may be a good tutorial for you.\n\nAfter completing this tutorial you'll have a deeper understanding of\nmany Python features. Here are some of the topics we'll cover:\n\n-  How objects are created and names are assigned to them\n\n-  Ways to modify a namespace: assignment, import, function definition\n   and call, and class definition and instantiation. Much of the\n   tutorial is structured around namespaces and how they get modified to\n   help you understand most of the differences between variables in\n   other languages and those in Python, including\n\n   -  why Python has neither pass-by-value nor pass-by-reference\n      function call semantics,\n\n   -  and why parameters passed to a function can sometimes be changed\n      by it and sometimes cannot.\n\n-  Iterables, iterators, and the iterator protocol, including how to\n   make class instances iterable\n\n-  How to use generators to make your code easier to read and understand\n\n-  Hacking classes after their definition, and creating classes without\n   a class statement, as an exercise to better understand how they work\n\n-  Bound versus unbound methods, how they're implemented, and\n   interesting things you can do with bound methods\n\n-  How and why you might want to create or use a partial function\n\n-  Example use-cases of functions as first-class objects\n\n-  Unpacking and packing arguments with \\* and \\*\\* on function call and\n   definition\n\nBring a laptop with Python 3 and Jupyter Notebook.\n",
  "duration": 11841,
  "recorded": "2017-05-18",
  "speakers": [
    "Stuart Williams"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/oQca6eDcjA8/hqdefault.jpg",
  "title": "Python Epiphanies",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=oQca6eDcjA8"
    }
  ]
}
