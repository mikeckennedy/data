{
  "description": "Introduction\n~~~~~~~~~~~~\n\nReverse geocoding using online web services such as Google Maps is\nincredibly slow and is also restrictive in terms of the number of\nrequests that can be made per day. Offline reverse geocoders have been\nbuilt for PostGIS databases and also Python but are either complicated\nor slow. In this talk, I will be presenting a fast, offline reverse\ngeocoder in Python. The basic outline of the talk is presented below.\n\nThe Library\n~~~~~~~~~~~\n\nThe library improves on an existing one built by Richard Penman in the\nfollowing ways:\n\n1. It supports Python 2 and 3.\n2. It geocodes a lot more location information. Besides the place name,\n   city and country, the library returns the administrative regions (1 &\n   2) and the nearest latitude and longitude.\n3. But the key enhancement is performance. The library extends the K-D\n   tree class in the scipy package and implements a parallelised version\n   of it.\n\nThis reverse geocoder is released under the LGPL license and is\navailable `here <https://github.com/thampiman/reverse-geocoder>`__.\n\nImplementation\n~~~~~~~~~~~~~~\n\nThe first time the library is called, information on places with a\npopulation greater than 1000 is downloaded from the\n`Geonames <http://download.geonames.org/export/dump/>`__ database, and\nit is stored locally. The GPS coordinates of these places are populated\nin a K-D tree and the nearest neighbour (NN) algorithm is then used to\nfind the place closest to the input GPS coordinate. The scipy package\nprovides a `K-D tree\nclass <http://docs.scipy.org/doc/scipy-0.14.0/reference/generated/scipy.spatial.KDTree.html%20%22cKDTree%22>`__\nand this is extended to implement a multi-process version. In this talk,\nI will be presenting details of this implementation. A basic background\nin Python, numpy, multi-processing and shared memory is assumed. The K-D\ntree class in the scipy package supports only the Minkowski p-norm\ndistance for the NN algorithm. Although this has not been released\npublicly, I will also be presenting a version of the library using the\nhaversine formula for much more accurate geocoding.\n\nPerformance Study\n~~~~~~~~~~~~~~~~~\n\nThe library supports two modes:\n\n1. Single-process mode (Mode 1)\n2. Multi-process mode (Mode 2): The default mode\n\nA performance comparison of the two modes on a quad-core Macbook Pro is\nshown below. |Performance Comparison|\n\nMode 2 runs 2x faster especially for large inputs, i.e. 10M coordinates.\n\nApplications\n~~~~~~~~~~~~\n\nIn this part of the talk, I will discuss how the library is being used\nat `OpenSignal <http://opensignal.com/>`__, where I work as a data\nscientist. The main purpose for building the library was to be able to\ngeocode terabytes of data (approx. 500M coordinates). Speed was\ntherefore crucial. I will discuss methods on geocoding at this scale in\nreal-time and also offline. I will also talk about how this open-source\nlibrary is being used by the community.\n\nContributions by the Community\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSince its release on Github on 27-Mar-2015, the open-source community\nhas also been instrumental in testing, fixing bugs and implementing\nadditional features. In this part of the talk, I will given an overview\nof the following two major changes made by other developers:\n\n1. Python 3 support, and\n2. `C++\n   wrapper <https://github.com/thampiman/reverse-geocoder/tree/master/c++>`__\n   for the Python library.\n\n.. |Performance Comparison| image:: https://raw.githubusercontent.com/thampiman/reverse-%20geocoder/master/performance.png\n\n",
  "duration": 962,
  "language": "eng",
  "recorded": "2015-06-21",
  "speakers": [
    "Ajay Thampi"
  ],
  "summary": "A fast, offline reverse geocoder in Python. This implementation uses\na parallelised K-D tree and the details of this implementation will\nbe presented. The key feature is speed; 10 million coordinates can be\ngeocoded in less than 30 seconds. The library is released under the\nLGPL license and is available at\nhttps://github.com/thampiman/reverse-geocoder.",
  "thumbnail_url": "https://i.ytimg.com/vi/8TR3RxJXjr0/hqdefault.jpg",
  "title": "A Fast, Offline Reverse Geocoder in Python",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=8TR3RxJXjr0"
    }
  ]
}
