{
  "copyright_text": "Creative Commons Attribution license (reuse allowed)",
  "description": "pytest is a testing framework that makes writing and running Python\ntests simpler. Adopting new tooling in a large system is often a burden.\nHow can you introduce pytest gradually with minimal pain?\n\nWho\n---\n\nThis is for anyone currently using ``unittest`` for Python unit testing\nthat would like to adopt ``pytest``.\n\nTakeaways\n---------\n\n-  How to run ``pytest``\n-  How to create a basic ``pytest`` configuration\n-  Using ``pytest`` marks to shim an existing project\n-  Converting a ``unittest`` test to ``pytest``\n\nWhat\n----\n\nWith its simplified syntax, powerful fixture behaviors, detailed test\nreports, and plugin-based architecture, ``pytest`` has a lot to offer.\nWhether you're new to Python unit testing or you've been using\n``unittest`` for a while, ``pytest`` may be something to consider. It's\nnot too hard to get up and running with ``pytest`` on a fresh project,\nbut how can you retrofit an existing project without having to refactor\nthe world all at once?\n",
  "duration": 1732,
  "language": "eng",
  "recorded": "2019-07-27T11:15:00",
  "related_urls": [
    {
      "label": "Conference schedule",
      "url": "https://www.pyohio.org/2019/events/schedule"
    }
  ],
  "speakers": [
    "Dane Hillard"
  ],
  "tags": [],
  "thumbnail_url": "https://i.ytimg.com/vi/0BzXV0J3-v8/maxresdefault.jpg",
  "title": "Adopt-a-pytest",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=0BzXV0J3-v8"
    }
  ]
}
