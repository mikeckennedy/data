{
  "copyright_text": "Creative Commons Attribution license (reuse allowed)",
  "description": "Domain-Driven Design (DDD) is an approach to software development that\nemphasises high-fidelity modelling of the problem domain, and which uses\na software implementation of the domain model as a foundation for system\ndesign. This approach helps organize and minimize the essential\ncomplexity of your software. DDD has been used with success within the\ntraditional enterprise programming ecosystems of Java and .NET, but has\nseen only limited adoption in the Python community.\n\nIn this talk we introduce Python programmers to the core tactical\npatterns of DDD and show how they can be realised in idiomatic Python,\nfreeing the most valuable parts of your system \u2013 the domain model \u2013 from\nonerous dependencies on particular databases or application frameworks.\n\nIn this talk we share what we\u2019ve learned from applying DDD in Python to\nlarge projects.\n",
  "duration": 3675,
  "language": "eng",
  "recorded": "2018-07-27",
  "related_urls": [
    {
      "label": "Conference schedule",
      "url": "https://ep2018.europython.eu/p3/schedule/ep2018/"
    }
  ],
  "speakers": [
    "Robert Smallshire"
  ],
  "tags": [],
  "thumbnail_url": "https://i.ytimg.com/vi/Ru2T4fu3bGQ/maxresdefault.jpg",
  "title": "Domain-Driven Design Patterns in Python",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=Ru2T4fu3bGQ"
    }
  ]
}
