{
  "alias": "video/2721/creating-a-browser-based-virtual-computer-lab-for",
  "category": "SciPy 2014",
  "copyright_text": "https://www.youtube.com/t/terms",
  "description": "One of the difficulties in using Python for scientific applications is\nthat one needs a fairly complete set of Python data processing and\nvisualization packages to be installed, beyond the standard Python\ndistribution. Freely available scientific Python distributions like\nEnthought Canopy and Anaconda address this problem. A typical approach\nto teaching Python is to use a dedicated computer lab, where one of\nthese distributions is installed on a set of machines with identical\ncomputing environments for use by students. With laptop computers\nbecoming cheap and ubiquitous, an alternative approach is to allow\nstudents to use their own computers, where they install one of the\nscientific Python distributions by themselves. This approach requires\nmore set-up time, because the software often requires some minor\ntweaking for each software platform, but requires no dedicated hardware\nand has the advantage of allowing students to easily run programs after\nclass on their own computers. This presentation discusses a third\napproach that involves creating a software environment for Python using\n\u201ccloud computing\u201d. There are already commercial products available that\nprovide well-supported Python computing environments in the cloud. This\npresentation focuses on alternative \u201croll your own\u201d solutions using\nopen-source software that are specifically targeted for use in an\ninteractive classroom instruction setting.\n\nCreating a virtual computing lab usually involves instantiating a server\nusing a cloud infrastructure provider, such as Amazon Web Services. A\nnew server can be set-up within minutes, with a scientific Python\ndistribution automatically installed during set-up. Students can then\nlogin to their own accounts on the server using a browser-based\ninterface to execute Python programs and visualize graphical output.\nTypically, each student would use a notebook interface to work on\nlessons.\n\nDifferent approaches can be used to create separate accounts for\nmultiple users. The simplest would be to create different user accounts\non a Linux virtual machine. If greater isolation is required,\nlightweight linux containers can be created on-demand for each user.\nAlthough IPython Notebook can currently be run as a public server to\nwork with multiple notebooks simultaneously, true multi-user support is\nexpected to be implemented further down the road. However, there are a\nfew open-source projects, such as JiffyLab, that already support a\nmulti-user IPython Notebook environment. Another option is to use the\nopen-source GraphTerm server, which supports a multi-user \u201cgraphical\nterminal\u201d environment with a notebook interface. The pros and cons of\nthese different approaches to building a virtual computer lab will be\ndiscussed.\n\nAlso discussed will be additional features that could be useful in a\nvirtual computing lab such as the capability for the instructor to chat\nwith the students and monitor their individual progress using a\n\u201cdashboard\u201d. Allowing students to collaborate in groups, with ability to\nview and edit each others\u2019 code, can help promote classroom interaction.\nEnhancements to the notebook interface, such as \u201cfill in the blanks\u201d\nnotebooks, can facilitate more structured instruction. The\nimplementation of some of these features in the GraphTerm server will be\ndiscussed.\n\nLINKS:\n\n`JiffyLab source <https://github.com/ptone/jiffylab>`__\n\n`GraphTerm source <https://github.com/mitotic/graphterm>`__\n\n`GraphTerm talk from SciPy\n2013 <http://conference.scipy.org/proceedings/scipy2013/pdfs/saravanan.pdf>`__\n",
  "duration": null,
  "id": 2721,
  "language": "eng",
  "quality_notes": "",
  "recorded": "2014-07-09",
  "related_urls": [
    "http://conference.scipy.org/proceedings/scipy2013/pdfs/saravanan.pdf",
    "https://github.com/mitotic/graphterm",
    "https://github.com/ptone/jiffylab"
  ],
  "slug": "creating-a-browser-based-virtual-computer-lab-for",
  "speakers": [
    "Ramalingam Saravanan"
  ],
  "summary": "With laptops and tablets becoming more powerful and more ubiquitous in\nthe classroom, traditional computer labs with rows of expensive desktops\nare beginning to lose their relevance. This presentation will discuss\nbrowser-based virtual computer labs for teaching Python, using a\nnotebook interface, as an alternative approach to classroom instruction.\n",
  "tags": [],
  "thumbnail_url": "https://i1.ytimg.com/vi/LiZJMYxvJbQ/hqdefault.jpg",
  "title": "Creating a browser based virtual computer lab for classroom instruction",
  "videos": [
    {
      "length": 0,
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=LiZJMYxvJbQ"
    }
  ]
}
