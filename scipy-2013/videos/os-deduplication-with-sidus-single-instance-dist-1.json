{
  "alias": "video/2097/os-deduplication-with-sidus-single-instance-dist-1",
  "category": "SciPy 2013",
  "copyright_text": "https://www.youtube.com/t/terms",
  "description": "",
  "duration": null,
  "id": 2097,
  "language": "eng",
  "quality_notes": "",
  "recorded": "2013-07-01",
  "slug": "os-deduplication-with-sidus-single-instance-dist-1",
  "speakers": [],
  "summary": "Authors: Quemener, Emmanuel, Centre Blaise Pascal (Lyon, France);\nCorvellec, Marianne, McGill University (Montreal)\n\nTrack: Reproducible Science\n\nDeveloping scientific programs to be run on multiple platforms takes\ncaution. Python is typically great as a glue language (COTS approach,\nfor 'Component Off the Shelf'). But massive integration requires a\ntechnical platform which may be difficult to even deploy. It may be\ntempting to stick to the same environment for both development and\noperation. But environments on HPC nodes are very different from those\non workstations. Even if Python comes with 'batteries included', it\nrelies on external (C or Fortran) libraries, especially via SciPy. So\nyou want to be careful when running your Python codes on a cluster,\nafter developing it on your workstation. In the end, how do you compare\ntwo scientific results from the same program run on two different\nmachines? In the variability, how do you tell the part due to the\nhardware from the part due to the software? As a scientist, you\ntypically port your Python code from your workstation to cluster nodes.\nYou want to have a uniform software base, so that discrepancies between\nruns can be attributed to hardware differences, or to the actual code,\nif edited. SIDUS (single-instance distributing universal system) is your\nsolution for extreme deduplication of an operating system (OS). SIDUS\noffers scientists a framework for conducting reproducible experiments.\nTwo nodes booting on the same SIDUS base run the exact same system. This\nway, actually relevant tests can be carried out. We recently used Python\nto evaluate performance for a cluster-distributed file system.\nUnexpectedly, early results showed lack of reproducibility over time as\nwell as over the different nodes. Using SIDUS, it was possible to\ndiscard that discrepancies might come from the OS. We could identify\nthat they were due to C-states (CPU power-saving modes), which are\nresponsible for large fluctuations in global performance losses (up to\n50%).\n",
  "tags": [
    "Tech"
  ],
  "thumbnail_url": "https://i1.ytimg.com/vi/J5myH0y_bks/hqdefault.jpg",
  "title": "OS deduplication with SIDUS (single-instance distributing universal system); SciPy 2013 Presentation",
  "videos": [
    {
      "length": 0,
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=J5myH0y_bks"
    }
  ]
}
