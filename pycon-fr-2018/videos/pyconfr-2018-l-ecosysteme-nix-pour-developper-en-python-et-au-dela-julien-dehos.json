{
  "copyright_text": "Creative Commons Attribution license (reuse allowed)",
  "description": "Un programme en Python est rarement script isol\u00e9 effectuant quelques\ninteractions basiques avec le syst\u00e8me exploitation. Il est fr\u00e9quent\nd'utiliser \u00e9galement des biblioth\u00e8ques, des modules \u00e9crits dans d'autres\nlangages, des syst\u00e8mes de base de donn\u00e9es... Il en r\u00e9sulte de nombreuses\nd\u00e9pendances qui peuvent rendre un projet difficile \u00e0 construire et \u00e0\nd\u00e9ployer.\n\nL'\u00e9cosyst\u00e8me Nix permet de g\u00e9rer ce genre de d\u00e9pendances efficacement.\nIl compl\u00e8te ou remplace certains outils classiques de Python mais\n\u00e9galement d'autres langages, fournissant ainsi un syst\u00e8me commun pour\nconstruire et d\u00e9ployer des packages et des services.\n\nDans cette pr\u00e9sentation, accessible \u00e0 tous les niveaux, je rappellerai\nquelques outils de packaging classiques en Python, puis je pr\u00e9senterai\nl'\u00e9cosyst\u00e8me Nix et montrerai comment l'utiliser pour d\u00e9velopper,\npackager et d\u00e9ployer une application web Python comportant un module C++\net une base de donn\u00e9es.\n",
  "duration": 1582,
  "language": "fra",
  "recorded": "2018-10-06",
  "related_urls": [
    {
      "label": "schedule",
      "url": "https://www.pycon.fr/2018/program/"
    }
  ],
  "speakers": [
    "Julien Dehos"
  ],
  "tags": [],
  "thumbnail_url": "https://i.ytimg.com/vi/rmRy9QZLp-g/maxresdefault.jpg",
  "title": "L'\u00e9cosyst\u00e8me Nix pour d\u00e9velopper en Python, et au del\u00e0",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=rmRy9QZLp-g"
    }
  ]
}
