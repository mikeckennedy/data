{
  "description": "Python is a dynamically (but strongly, for some value of \"strongly\")\ntyped programming language. Notwithstanding its dynamism, checking\ntypes--or other behaviors--of variables has always been possible in\nPython code, and a steady stream of users have had a desire to do so. At\na conceptual level, enforcing a type is a subset of enforcing an\ninvariant on a variable, and the broader demand for design by contract\nhas been a recurrent theme in Python discussions. PEP 316 addressed this\ndesire (but was not accepted) a decade ago, as did the long defunct\nlibrary PyDBC. Currently maintained, however, is the PyContracts\nlibrary, which allows documenting and enforcing both types narrowly, and\npredicates of variables more broadly. I myself wrote a simple recipe for\nbasic type checking using PEP 3107 annotations at the Python Cookbook:\nType checking using Python 3.x annotations\n(http://code.activestate.com/recipes/578528-type-checking-using-\npython-3x-annotations/).\n",
  "duration": 4340,
  "recorded": "2015-01-31",
  "speakers": [
    "David Mertz"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/8QIYPws-51A/hqdefault.jpg",
  "title": "Python's (future) type annotation system(s)",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=8QIYPws-51A"
    }
  ]
}
