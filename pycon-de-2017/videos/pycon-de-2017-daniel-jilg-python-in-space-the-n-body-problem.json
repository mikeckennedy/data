{
  "copyright_text": "Creative Commons Attribution license (reuse allowed)",
  "description": "**Daniel Jilg** (@breakthesystem)\nI've been an app developer, a CTO, and a Python developer, mostly at the same time. I've carried through it all a desire to learn, a love for data visualisation, and a knack to pass on what I learned. I want to learn, I want to mentor, and I want to create inclusive spaces for people to learn and mentor themselves. In my free time, I open tins for my cats (who have their own instagram account), visit various spaceports around the world, and occasionally dabble in some motor sports.\n\n**Abstract**\n\nThe N Body Problem is a computationally complex problem that we use to predict how planets and galaxies \u2013 and everything in between \u2013 move through space. I'll show you some interesting ways to calculate it, and we'll have a look at what to do, should you find yourself in a space ship's pilot seat.\n\n**Description**\n\nThe N Body Problem is one of those famously hard to solve problems in computer science. It describes the movement and interactions of n bodies in space (where n is usually greater 3). You need a lot of computational power to passably approximate the gravitational influences a group of celestial bodies exert on each other. Can Python do that?\n\nI'll give a super brief overview of the history of trying to predict the motion of moon, sun and the visible stars, and then we'll dive deep into the original N Body Problem, followed by creative ways to reduce the amount of calculation needed and still get a reasonable approximation. Doing this, we can see how to tackle some complex mathematic and algorithmic problems easily using Python.\n\nIf you're a Python beginner or even very early in your career as a developer, you are going to get a first impression of efficient algorithms and complex data structures, and how to measure complexity using Big O notation. If you're more advanced, you'll be treated to a hopefully interesting way of implementing the Barnes-Hutt-algorithm, and some space nerdery.\n\nOnce we have all the pieces in place, let's play with some orbits. We'll see how orbits actually behave, as opposed to what the untrained mind would expect. We can use our new algorithms to try out some manoeuvres often used by real space craft and help you be prepared for when that call from ESA or NASA finally comes, and you'll be invited to work on Python In Space!\n\n\n**Recorded at** PyCon.DE 2017 Karlsruhe: https://de.pycon.org/\n\n**Video editing**: Sebastian Neubauer & Andrei Dan\n\n**Tools**: Blender, Avidemux & Sonic Pi",
  "duration": 2464,
  "language": "eng",
  "recorded": "2017-10-25",
  "related_urls": [
    {
      "label": "schedule",
      "url": "https://2017.de.pycon.org/schedule/"
    }
  ],
  "speakers": [
    "Daniel Jilg"
  ],
  "tags": [
    "complexity",
    "data structures",
    "algorithms",
    "space",
    "python"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/E1nx4ReTgps/maxresdefault.jpg",
  "title": "Python in Space - The N Body Problem",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=E1nx4ReTgps"
    }
  ]
}
