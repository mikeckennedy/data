{
  "alias": "video/1028/combining-embedded-and-interactive-python-in-a-de",
  "category": "EuroPython 2011",
  "copyright_text": "Standard YouTube License",
  "description": "LLDB is an open source compiler currently under development. LLDB\nincorporates Python in several different ways: From the command line,\none can drop into an interactive Python script interpreter, entering\nnormal Python interactive commands and having them interpreted and\nexecuted. In addition, the LLDB debugger has a programming API that\nallows users to call actual debugger functions and access real debugger\nobjects. This API is run through SWIG and converted into a Python module\nthat gets automatically imported into the interactive interpreter inside\nLLDB. The upshot of this is that, in the Python mode, users can call the\nAPI functions as if they were regular Python functions. This is turn\nmeans that users can do things like hit a breakpoint, call the\nappropriate API functions to get the actual current frame object, check\nto see if the caller function several frames up the stack is a\nparticular function, and if so, perform some other interesting action.\nLLDB also allows for breakpoint commands to be written in Python (which\ntherefore allows them to call the API functions), as well as having a\ncommand that interprets and executes a single line of Python.\n\nBecause the API and all of the debugger functionality is available in a\nPython module, it is also possible to write a debugger front end\ncompletely in Python and have it import the LLDB module and call the\nLLDB API functions (which calls into the LLDB shared library), to create\na new debugger front end. Our test suite takes advantage of this to run\ntests on the LLDB library without having to start up an interactive LLDB\ndebubgger session.\n\nThere were many interesting problems encountered and overcome in getting\nall of this to work. LLDB combines both interactive Python and embedded\nPython. There were some interesting things worked out so that a single\nPython environment dictionary is used for the entire debugger session: A\nuser can pop into and out of the interactive interpreter and have access\nat any time to anything defined in any previous visit to the interactive\ninterpreter (within the same debug session); breakpoint commands have\naccess to everything defined in the interactive session; so do embedded\nscript commands. It gets even more complicated, because LLDB can have\nmultiple debugger sessions alive at once, and each debugger session has\nits own Python interpreter with its own dictionary and must not be\nallowed to interfere with another session's state. In this talk I will\ndiscuss how we implemented many of these features in LLDB, pointing out\nsome of the more interesting problems we encountered and how we overcame\nthem, and demonstrate it all working in LLDB.\n",
  "duration": null,
  "id": 1028,
  "language": "eng",
  "quality_notes": "",
  "recorded": "2011-07-24",
  "slug": "combining-embedded-and-interactive-python-in-a-de",
  "speakers": [
    "Caroline Tice"
  ],
  "summary": "[EuroPython 2011] Caroline Tice - 23 June 2011 in \"Track Ravioli\"\n",
  "tags": [
    "api",
    "embedded"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/a6oHHGIV3r4/hqdefault.jpg",
  "title": "Combining Embedded and Interactive Python in a Debugger:  A Case Study",
  "videos": [
    {
      "length": 0,
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=a6oHHGIV3r4"
    },
    {
      "length": 0,
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=e0QaqrVbNMY"
    }
  ]
}
