{
  "description": "This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.\n\nDescription\nThe strengths and weaknesses of Python lend themselves to a different style of object oriented programming. By accepting several constraints on how we design and implement classes, we make our code more robust, more testable, and easier to adapt to changing circumstances.\n\nAbstract\nDetailed outline\nIntroduction (2m)\nPython and object oriented programming (1m)\nWhy OO design principles? (1m)\nInterfaces (4m)\nDelve into the best practices of explicit (sometimes called \"goosely typed\") interfaces in Python, and showing how to use those with the zope.interface system.\n\nWhy declare interfaces?\nDeclaring interfaces with zope.interface.\nImplementing and providing interfaces with zope.interface.\nTesting for interface provision.\nBoring constructors (4m)\nNewcomers to Python often put non-trivial code in the constructors. This is often a bad idea. This section will cover why, and show where is the right place to put non-trivial initialization logic.\n\nBoring vs. interesting constructors.\nWhy boring constructors.\nMoving interesting stuff to class methods.\nUsing attrs.\nBoring objects (4m)\n\"Objects are data and behavior\" -- following this principle in a naive way leads to putting a lot of code inside objects, creating unwieldy objects and unwieldy interfaces. This section will discuss why that is problematic, and show-case some alternatives.\n\nWhy make objects boring? (1m)\nWhat's singledispatch (1m)\nExample using functools.singledispatch (2m)\nImmutability (4m)\nShared mutable state is the root of all evil -- and in Python, a lot of things are shared! One way to avoid evil is to reduce mutability. This section will discuss how to avoid mutability while keeping reasonable performance and ergonomic APIs.\n\nImmutability as bug-avoidance (1m)\nImmutability as simpler interfaces (1m)\nFrozen attrs\nEfficiently immutable data structures\nAvoiding Private Methods (4m)\nPrivate methods are often under-documented crutches. This section will discuss the kind of problems they can cause, and describe good alternatives as well as an almost-mechanical refactoring to avoid private methods.\n\nWhat's wrong with private methods? (1m)\nUsing private attributes (1m)\nRefactoring private methods away (2m)\nComposition (4m)\nTraditional object-orientation stressed inheritance. However, for a long time, it has been known that inheritance is problematic -- even the GoF \"Design Patterns\" covers how to avoid it. This section will cover the problems it causes, and good alternatives.\n\nInheritance-as-API (1m)\nProblems with inheritance-as-API (1m)\nWhat is composition? (1m)\nComposition-as-API (1m)\nSummary (3m)\nBringing this all to a close, the summary will show the common thread in all of these -- that keepings objects simple and predictable (\"boring\") leads to code that is easier to maintain.\n\nPython affords near-infinite freedom (1m)\nChoices have consequences (1m)\nKnow the rules to break the rules (1m)\n\nOriginal slides: https://t.ly/6g1rZ\n\nAbout the speaker\nMoshe has been in the open source community since 1995 and in the Python community since 1999. He has been a core contributor to Python, and is a core contributor, and an early member, of the Twisted project.\n\nMoshe has given talks at the International Python Conference, PyCon, PyBay, PyTexas and several Python and Docker meetups.\n\nSponsor Acknowledgement\nThis and other PyBay2019 videos are via the help of our media partner AlphaVoice (https://www.alphavoice.io/)!\n\n#pybay #pybay2019 #python #python3",
  "recorded": "2019-08-17",
  "speakers": [
    "Moshe Zadka"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/4oiJIHG9xNU/hqdefault.jpg",
  "title": "Boring Object Orientation",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=4oiJIHG9xNU"
    }
  ]
}
