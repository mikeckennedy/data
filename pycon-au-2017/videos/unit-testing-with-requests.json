{
  "description": "If you're working with APIs or the web in python you will (or should) have\nheard of requests. The 'HTTP for Humans' library is one of python's most\npopular and most downloaded libraries and is referenced by the urllib docs as\nthe recommended way to do HTTP requests in python.\n\nAs strict unit testers of our code we need to assert that our projects are\nmaking the expected HTTP requests however don't want to be making actual\nnetwork connections. Most people start with simply mocking this requests\ninterface but this is much more complex than it appears on first glance and\nfrequently ends up replicating large chunks of the interface or skipping mocked\nout functions within your code.\n\nIn this talk I'll cover two libraries that can help you mock out your HTTP\nrequests: requests-mock and betamax.\n\nrequests-mock is the extended and more correct version of mocking out the\ninterface. It lets you ensure that the requests you expect are going over the\nwire, but ensures that all the bytes/strings, json decoding and other helper\nfeatures that requests offers work, without your mocks becoming unmanageable.\n\nBetamax gives you functional style testing without the network connection. It\nallows you to record real interactions through requests, store that to file,\nand replay them later in testing.\n\nBetween them we can assert our behaviour both against our local, constructed\nresponses, and real recorded responses our application has made.\n\nWith a small example app I'll demonstrate how you can use these libraries, the\ndifferent benefits of each, and how to structure your tests to make the most\nuse of them.",
  "duration": 1807,
  "language": "eng",
  "recorded": "2017-08-06",
  "speakers": [
    "Jamie Lennox"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/t6MtEnw3Zww/hqdefault.jpg",
  "title": "Unit Testing with Requests",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=t6MtEnw3Zww"
    }
  ]
}
