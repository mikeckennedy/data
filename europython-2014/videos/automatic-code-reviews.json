{
  "alias": "video/2996/automatic-code-reviews",
  "category": "EuroPython 2014",
  "copyright_text": "http://creativecommons.org/licenses/by/3.0/",
  "description": "Static analysis tools are a great idea in theory, but are not often\nreally used in practice. These tools usually require quite a lot of\ninitial effort to get set up in a way which produces meaningful output\nfor you or your organisation's particular coding style and values. As a\nresult, it's common to see initial enthusiasm replaced by ignoring the\ntools.\n\nSuch tools can be incredibly beneficial however, and even go so far as\nto provide an automatic code review, and this talk will explain what\nkind of benefits you can get from the tools, as well as explain what you\ncan and cannot expect.\n\nThis talk is aimed at experienced developers who are interested in\nimproving their coding practices but who have either never tried static\nanalysis tools, or who have not seen the upsides. It will hopefully also\nbe useful to people who do use the tools, perhaps introducing them to\nnew tools or concepts they were not aware of yet.\n",
  "duration": null,
  "id": 2996,
  "language": "eng",
  "quality_notes": "",
  "recorded": "2014-07-23",
  "slug": "automatic-code-reviews",
  "speakers": [
    "Carl Crowder"
  ],
  "summary": "A lot of great Python tools exist to analyse and report on your\ncodebase, but they can require a lot of initial set up to be useful.\nDone right, they can be like an automatic code review. This talk will\nexplain how to set up and get the best out of these tools, especially\nfor an existing, mature codebase.\n",
  "tags": [],
  "thumbnail_url": "https://i.ytimg.com/vi/ILBsJXRQ008/hqdefault.jpg",
  "title": "Automatic code reviews",
  "videos": [
    {
      "length": 0,
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=ILBsJXRQ008"
    }
  ]
}
