{
  "alias": "video/2984/python-in-system-testing",
  "category": "EuroPython 2014",
  "copyright_text": "http://creativecommons.org/licenses/by/3.0/",
  "description": "When you think about Python+testing, you usually think about testing\nyour code - unittests, mostly. But it is not the only case! When you\nhave a big system, you need to test it on much higher level - if only to\ncheck if all the components are wired in the right way. You may do it\nmanually, but it is tedious and time-consuming - so you want to automate\nit. And here comes Python - the language of choice in many QA\ndepartments.\n\nI will tell about differences between unittesting and system testing\nwhich result in totally different requirements on test\nmanagement/running systems. I will tell how we use Python (and a little\nwhy) to automate our work. Finally, I will tell a little about my \"idee\nfixe\" - a framework for system testing written in Python.\n",
  "duration": null,
  "id": 2984,
  "language": "eng",
  "quality_notes": "",
  "recorded": "2014-07-23",
  "slug": "python-in-system-testing",
  "speakers": [
    "Katarzyna Jachim"
  ],
  "summary": "When you think about Python+testing, you usually think about testing\nyour code - unittests, mostly. But it is not the only case! When you\nhave a big system, you need to test it on much higher level - if only to\ncheck if all the components are wired in the right way. You may do it\nmanually, but it is tedious and time-consuming - so you want to automate\nit. And here comes Python - the language of choice in many QA\ndepartments.\n",
  "tags": [],
  "thumbnail_url": "https://i.ytimg.com/vi/I-Hbi81G6Ls/hqdefault.jpg",
  "title": "Python in system testing",
  "videos": [
    {
      "length": 0,
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=I-Hbi81G6Ls"
    }
  ]
}
