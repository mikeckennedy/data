{
  "alias": "video/2935/post-mortem-debugging-with-heap-dumps",
  "category": "EuroPython 2014",
  "copyright_text": "http://creativecommons.org/licenses/by/3.0/",
  "description": "Post-Mortem Debugging with Heap-Dumps\n=====================================\n\nUNIX core-dumps, Windows minidumps and analogous solutions of other\noperating systems are well established technologies for post-mortem\ndefect analysis of native-code processes. In principle those dumps can\nbe used to analyse \u201einterpreted\u201c programs running within a native-code\ninterpreter-process. However in practise this approach is tedious and\nnot always successful [1]. Therefore operating system independent dump\nmethods were developed for some \u201einterpreted\u201c languages [2]. A prominent\nexample are Java heap dumps [3].\n\nUnfortunately up to now there was no practically usable dump-method for\nPython. Various attempts were made to utilise OS-level dump methods [4,\n5]. In 2012 Eli Finer published the Python module *pydump* [6]. This\nmodule pickles the traceback of an exception and subsequently uses the\npdb debugger to analyse the unpickled traceback. Unfortunately *pydump*\nfails on PicklingErrors.\n\nIn my talk I'll present the Python package\n`*pyheapdump* <https://pypi.python.org/pypi/pyheapdump>`__. It has the\nsame operation principle as Eli's *pydump*, but is an independent\nimplementation. *pyheapdump* uses an extended pickler\n(`sPickle <https://pypi.python.org/pypi/sPickle>`__) to serialise all\nrelevant objects of a Python process to a file. Later on a fault\ntolerant unpickler recreates the objects and a common Python debugger\ncan be used to analyse the dump. The pickler extensions make it possible\nto:\n\n-  pickle and unpickle many commonly not pickleable objects [7].\n-  replace the remaining not pickleable objects by surrogate objects so\n   that the resulting object graph is almost isomorphic to the original\n   object graph.\n\nWhich objects are relevant? In its default operation mode *pyheapdump*\nuses the frame-stacks of all threads as start point for pickling.\nFollowing the usual rules for pickling the dump includes all local\nvariables and all objects reachable from a local variable and so on.\nThat is usually enough for a successful defect analysis.\n\nCompared with other Python post-mortem debugging methods *pyheapdump*\nhas several advantages:\n\n-  It is a pure Python solution and independent from the operation\n   system.\n-  Creation of the pyheapdump and fault analysis can be performed\n   different computers.\n-  It is not obstructive. It does not modify / monkey-patch or disturb\n   the dumped process in any way, with the exception of loading\n   additional modules.\n-  If used with the Pydev-debugger, it supports multi-threaded\n   applications.\n-  If used with the Pydev-debugger and Stackless Python, it supports\n   tasklets.\n\nThe implementation of *pyheapdump* is fairly small, because it draws\nmost of its functionality from the underlying sPickle package and from\nthe new Stackless-Support [8] of the Pydev-Debugger. Therefore it is -\ndespite of its short history - already a useful piece of software.\n\nOutline of the talk\n-------------------\n\n1. Introduction to the problem\n2. Previous works\n3. The concept of *pyheapdump*\n4. Live demonstration\n5. Open problems and further development\n6. Questions and Answers\n\nReferences\n----------\n\n1. Andraz Tori, Python, 2011-01-16: *gdb and a very large core dump*,\n   blog at http://www.zemanta.com/blog/python-gdb-large-core-dump/\n2. David Pacheco, ACM Queue - Programming Languages Volume 9 Issue 10,\n   October 2011: *Postmortem Debugging in Dynamic Environments*, PDF\n   http://dl.acm.org/ft_gateway.cfm?id=2039361&ftid=1050739&dwn=1&CFID=290171300&CFTOKEN=95099236\n3. Chris Bailey, Andrew Johnson, Kevin Grigorenko, IBM developerWorks,\n   2011-03-15: *Debugging from dumps - Diagnose more than memory leaks\n   with Memory Analyzer*, PDF\n   http://www.ibm.com/developerworks/library/j-memoryanalyzer/j-memoryanalyzer-pdf.pdf\n4. Brian Curtin, 2011-09-29: *minidumper - Python crash dumps on\n   Windows*, blog at\n   http://blog.briancurtin.com/posts/20110929minidumper-python-crash-dumps-on-windows.html\n5. David Malcolm, Fedora Feature, 2010-04-06: *Easier Python Debugging*\n   at http://fedoraproject.org/wiki/Features/EasierPythonDebugging\n6. Eli Finer, Github-Project, 2012: *pydump* at\n   https://github.com/gooli/pydump\n7. Anselm Kruis, EuroPython 2011: *Advanced Pickling with Stackless\n   Python and sPickle*, archived talk at\n   https://ep2013.europython.eu/conference/talks/advanced-pickling-with-stackless-python-and-spickle\n8. Fabio Zadrozny, 2013-12-12: *PyDev 3.1.0 released*, blog at\n   http://pydev.blogspot.de/2013/12/pydev-310-released.html\n\n",
  "duration": null,
  "id": 2935,
  "language": "eng",
  "quality_notes": "",
  "recorded": "2014-07-25",
  "related_urls": [
    "http://blog.briancurtin.com/posts/20110929minidumper-python-crash-dumps-on-windows.html",
    "http://dl.acm.org/ft_gateway.cfm?id=2039361&ftid=1050739&dwn=1&CFID=290171300&CFTOKEN=95099236",
    "http://fedoraproject.org/wiki/Features/EasierPythonDebugging",
    "http://pydev.blogspot.de/2013/12/pydev-310-released.html",
    "http://www.ibm.com/developerworks/library/j-memoryanalyzer/j-memoryanalyzer-pdf.pdf",
    "http://www.zemanta.com/blog/python-gdb-large-core-dump/",
    "https://ep2013.europython.eu/conference/talks/advanced-pickling-with-stackless-python-and-spickle",
    "https://github.com/gooli/pydump",
    "https://pypi.python.org/pypi/pyheapdump",
    "https://pypi.python.org/pypi/sPickle"
  ],
  "slug": "post-mortem-debugging-with-heap-dumps",
  "speakers": [
    "Anselm Kruis"
  ],
  "summary": "UNIX core-dumps, Windows minidumps or Java heap-dumps are well\nestablished technologies for post-mortem defect analysis. I'll present a\nsimilar technology for Python. An improved pickling mechanism makes it\npossible to serialise the state of a Python program for subsequent\nanalysis with a conventional Python-debugger.\n",
  "tags": [],
  "thumbnail_url": "https://i.ytimg.com/vi/0Xt-au2QnRg/hqdefault.jpg",
  "title": "Post-Mortem Debugging with Heap-Dumps",
  "videos": [
    {
      "length": 0,
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=0Xt-au2QnRg"
    }
  ]
}
