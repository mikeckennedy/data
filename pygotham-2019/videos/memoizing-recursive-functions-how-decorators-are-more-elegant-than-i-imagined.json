{
  "copyright_text": "Creative Commons Attribution license (reuse allowed)",
  "description": "Calculating the Fibonacci series is a classic example of writing a recursive\nfunction. However, calculating even `fib(50)` will tie up a modern computer\nfor a couple of minutes. The solution to this problem is memoization, which\ndecorators make particularly easy.\n\nBut how does a top-level decorator access the recursive call within the\nfunction itself?\n\nThe answer is both delightfully simple and extremely insightful, exposing\nhow seemingly simple language design choices can have profound effects on\nits usage.",
  "duration": 1500,
  "language": "eng",
  "recorded": "2019-10-04",
  "related_urls": [
    "https://2019.pygotham.org/talks/memoizing-recursive-functions-how-decorators-are-more-elegant-than-i-imagined/"
  ],
  "speakers": [
    "Abid H. Mujtaba"
  ],
  "tags": [],
  "thumbnail_url": "https://i.ytimg.com/vi/OAajxA2qjIU/maxresdefault.jpg",
  "title": "Memoizing recursive functions: How decorators are more elegant than I imagined",
  "videos": [
    {
      "type": "youtube",
      "url": "https://youtu.be/OAajxA2qjIU"
    }
  ]
}
