{
  "description": "Python is easy to learn and use programming language; however, managing\ndependencies and package versions for it are nowhere as pleasant. One of\nthe basic building block created to help with this is virtual\nenvironments. Join me in understanding how virtual environments work\nfrom within (by one of the project maintainers); also, to find out if\nthe good old virtualenv project has any place left, now that Python 3.4+\ncontains venv.\n\nThis talk is aimed to be a bit more technical in its first parts,\npresenting in technical details what a virtualenv is. The target\naudience is anyone who used virtual environments and wants to understand\nhow they tick from within. I\u2019ll also emphasise diversity and inclusion\nat Python interpreter level by highlighting other interpreters than\nCPython: Jython, PyPy or Iron Python. A concise outline goes as follows:\n\n| What is a virtual environment?\n| - why we need it\n| - what we use it for\n| - demo - virtualenv vs system env\n| How do we build a virtual environment (CPython)\n| - technical workflow of venv creation\n| - activation\n| -- bash\n| -- powershell\n| -- cmd.bat\n| Other interpreters\n| - why other than CPython?\n| - PyPy\n| - Jython\n| - virtualenv\n| - all Python support\n| - extra activation -> xonosh\n| Summary and q/a",
  "recorded": "2019-07-12",
  "speakers": [
    "Bernat Gabor"
  ],
  "tags": [
    "Virtual Env"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/o1Vue9CWRxU/hqdefault.jpg",
  "title": "status quo of virtual environments",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=o1Vue9CWRxU"
    }
  ]
}
