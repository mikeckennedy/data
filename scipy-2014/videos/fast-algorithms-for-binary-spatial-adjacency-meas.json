{
  "alias": "video/2793/fast-algorithms-for-binary-spatial-adjacency-meas",
  "category": "SciPy 2014",
  "copyright_text": "https://www.youtube.com/t/terms",
  "description": "Spatial weights matrices, :math:`W`, play an essential role in many\nspatial analysis tasks including measures of spatial association,\nregionalization, and spatial regression. A spatial weight\n:math:`w_{i,j}` represents potential interaction between each\n:math:`i,j` pair in a set of :math:`n` spatial units. The weights are\ngenerally defined as either binary :math:`w_{i,j}=\\\\{1,0\\\\}`, depending\non whether or not :math:`i` and :math:`j` are considered neighbors, or a\ncontinuous value reflecting some general distance relationship between\n:math:`i` and :math:`j`. This work focuses on the case of binary weights\nusing a contiguity criteria where :math:`i` and :math:`j` are rook\nneighbors when sharing an edge and queen neighbors when sharing a\nvertex.\n\nPopulation of the :math:`W` is computationally expensive, requiring, in\nthe naive case, :math:`O(n^2)` point or edge comparisons. To improve\nefficiency data decomposition techniques, in the form of regular grids\nand quad-trees, as well as spatial indexing techniques using r-trees\nhave be utilized to reduce the total number of local point or edge\ncomparisons. Unfortunately, these algorithms still scale quadratically.\nRecent research has also shown that even with the application of\nparallel processing techniques, the gridded decomposition method does\nnot scale as :math:`n` increases.\n\nThis work presents the development and testing of a high performance\n`implementation <https://github.com/jlaura/pysal/blob/weights/pysal/weights/_contW_binning.py#L181>`__,\nwritten in pure Python, using time constant and :math:`O(n)` operations,\nby leveraging high performance containers and a vertex comparison\nmethod. The figures below depict results of initial testing using\nsynthetically generated lattices of triangles, squares, and hexagons\nwith rook contiguity in black and queen contiguity in gray. These\ngeometries were selected to control for average neighbour cardinality\nand average vertex count per geometry. From these initial tests, we\nreport a significant speedup over r-tree implementations and a more\nmodest speedup over gridded decomposition methods. In addition to\nscaling linearly, while existing methods scale quadratically, this\nmethod is also more memory efficient. Ongoing work is focusing on\ntesting using randomly distributed data, and U.S. Census data, the\napplication of parallelization techniques to test further performance\nimprovements, and the use of fuzzy operator to account for spatial error\n.\n\n.. figure:: http://github.com/pysal/pPysal/blob/master/weights/figures/rawtime.png?raw=true%20\"Initial%20Results%20-%20Raw%20Speed\"\n   :alt: raw times\n\n   raw times\n.. figure:: http://github.com/pysal/pPysal/blob/master/weights/figures/speedup.png?raw=true%20\"Initial%20Results%20-%20Speedup\"\n   :alt: speedup\n\n   speedup\n.. figure:: http://github.com/pysal/pPysal/blob/master/weights/figures/rawl.png?raw=true%20\"Initial%20Results%20-%20List%20Raw%20Speed\"\n   :alt: linear speed\n\n   linear speed\n\n",
  "duration": null,
  "id": 2793,
  "language": "eng",
  "quality_notes": "",
  "recorded": "2014-07-13",
  "related_urls": [
    "http://github.com/pysal/pPysal/blob/master/weights/figures/rawl.png?raw=true%20",
    "http://github.com/pysal/pPysal/blob/master/weights/figures/rawtime.png?raw=true%20",
    "http://github.com/pysal/pPysal/blob/master/weights/figures/speedup.png?raw=true%20",
    "https://github.com/jlaura/pysal/blob/weights/pysal/weights/_contW_binning.py"
  ],
  "slug": "fast-algorithms-for-binary-spatial-adjacency-meas",
  "speakers": [
    "Jason Lauara"
  ],
  "summary": "Spatial weights matrices, :math:`W`, represent potential interaction\nbetween all :math:`i,j` in a study area and play an essential role in\nmany spatial analysis tasks. Commonly applied binary adjacency\nalgorithms using decomposition and tree representations scale\nquadratically and are ill suited for large data sets. We present a\nlinearly scaling, adjacency algorithm with significantly improved\nperformance.\n",
  "tags": [],
  "thumbnail_url": "https://i1.ytimg.com/vi/kNcA-yE_iNI/hqdefault.jpg",
  "title": "Fast Algorithms for Binary Spatial Adjacency Measures",
  "videos": [
    {
      "length": 0,
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=kNcA-yE_iNI"
    }
  ]
}
