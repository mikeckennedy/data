{
  "alias": "video/1397/views-can-be-classy",
  "category": "DjangoCon 2012",
  "copyright_text": "Creative Commons Attribution license (reuse allowed",
  "description": "It seems like most people in the Django community either don't have any\nidea how class-based views work or are scared to try them out. I want to\nhelp with a solid introduction to the technology.\n\n-  The usual \"who I am\" bit.\n-  Most other things in Django are classes.\n-  \n\n   -  models\n\n-  \n\n   -  forms\n\n-  \n\n   -  even templates\n\n-  Views should be classes, too.\n-  What view classes are provided by Django.\n-  How to create your own mixins to clean up pain points\n-  Where function-based views are still handy.\n-  Example CBVs for common use cases\n-  \n\n   -  handling form input for more than one form\n\n-  \n\n   -  serving different content based on users\n\n\n",
  "duration": null,
  "id": 1397,
  "language": "eng",
  "quality_notes": "",
  "recorded": "2012-09-04",
  "related_urls": [
    "https://crate.io/packages/django-braces/)"
  ],
  "slug": "views-can-be-classy",
  "speakers": [
    "Kenneth Love"
  ],
  "summary": "An overview of what class-based views (CBVs) are, which ones are\navailable, and how to use them in your projects. I'll also cover\ncreating mixins, where function-based views still make sense, and how to\ntest CBVs. As part of this, I'll be covering my django-braces\n(https://crate.io/packages/django-braces/) package.\n",
  "tags": [
    "class-based-views",
    "django"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/yr9HOLipPXc/hqdefault.jpg",
  "title": "Views can be Classy!",
  "videos": [
    {
      "length": 0,
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=yr9HOLipPXc"
    }
  ]
}
