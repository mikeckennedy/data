{
  "alias": "video/2974/support-python-2-and-3-with-the-same-code",
  "category": "EuroPython 2014",
  "copyright_text": "http://creativecommons.org/licenses/by/3.0/",
  "description": "Your library supports only Python 2, - but your users keep nagging you\nabout Python 3 support?\n\nAs Python 3 gets adopted more and more, users ask for Python 3 support\nin existing libraries for Python 2. This talk mentions some approaches\nfor giving users a Python 3 version, but will quickly focus on using the\nvery same code for a Python 2 and a Python 3 version.\n\nThis is much easier if you require Python 2.6 and up, and yet a bit\neasier if you require Python 3.3 as the minimum Python 3 version.\n\nThe talk discusses main problems when supporting Python 3 (some are\neasily solved):\n\n-  ``print`` is a function.\n\n-  More Python APIs return iterators that used to return lists.\n\n-  There's now a clear distinction between bytes and unicode (text)\n   strings.\n\n-  Files are opened as text by default, requiring an encoding to apply\n   on reading and writing.\n\nThe talk also explains some best practices:\n\n-  Start with a good automatic test coverage.\n\n-  Deal with many automatic conversions with a one-time 2to3 run.\n\n-  Think about how your library should handle bytes and unicode strings.\n   (Rule of thumb: Decode bytes as early as possible; encode unicode\n   text as late as possible.)\n\n-  Should you break compatibility with your existing Python 2 API? (Yes,\n   if there's no other way to design a sane API for Python 2 and 3. If\n   you do it, raise the first part of the version number.)\n\n-  Try to keep code that's different for Python 2 and 3 minimal. Put\n   code that needs to be different for Python 2 and 3 into a ``compat``\n   module. Or use third-party libraries like ``six`` or ``future``.\n\nFinally, the talk will mention some helpful resources on the web.\n",
  "duration": null,
  "id": 2974,
  "language": "eng",
  "quality_notes": "",
  "recorded": "2014-07-24",
  "slug": "support-python-2-and-3-with-the-same-code",
  "speakers": [
    "Stefan Schwarzer"
  ],
  "summary": "Your library supports only Python 2, - but your users keep nagging you\nabout Python 3 support?\n\nAs Python 3 gets adopted more and more, users ask for Python 3 support\nin existing libraries for Python 2. Although there are several\napproaches, this talk focuses on using the very same code for a Python 2\nand a Python 3 version.\n\nThe talk discusses the main problems when supporting Python 3 and best\npractices to apply for compatibility with Python 2 and 3.\n",
  "tags": [],
  "thumbnail_url": "https://i.ytimg.com/vi/elAV6aZDMvg/hqdefault.jpg",
  "title": "Support Python 2 and 3 with the same code",
  "videos": [
    {
      "length": 0,
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=elAV6aZDMvg"
    }
  ]
}
