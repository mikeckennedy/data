{
  "description": "\"Four shalt thou not count, neither count thou two, excepting that\n    thou then proceed to three.\"\n\n        Monty Python and the Holy Grail; Scene 33\n\nPython 3 has been around for more than eight years, and much of the\nPython ecosystem is now available both on Python 2 and Python 3, often\nusing a single code base. Nonetheless, this compatibility comes at a\ndevelopment cost and some library authors are considering ending support\nfor Python 2 . These once-python-2-compatible libraries are at risk of\nbeing upgraded on non compatible system and cause user (and developer)\nfrustration.\n\nWhile it may seem simple to cease support for Python 2, the challenge is\nnot in ending support, but doing so in a way that does not wreak havoc\nfor users who stay on Python 2. And that is not only a communications\nproblem, but a technical one : up until recently, it was impossible to\ntag a release as Python 3 only; today it is possible.\n\nLike any maintainer of a widely used library, we want to ensure that\nusers continue to use Python 2 continue to have functioning libraries,\neven after development proceeds in a way that does not support Python 2.\n\nOne approach is to ensure easy installation of older versions if\npossible avoid incompatible versions altogether. Users should not need\nto manually pin maximal version dependencies across their development\nenvironments and projects if all they want is to use the latest versions\nof libraries that are compatible with their system.\n\nEven if we did expect that of users, consider what would happen when a\npackage they rely on converts to be only Python 3 compatible. If they\nwere not tracking the complete dependency tree, they might discover, on\nupgrade, that their projects no longer work. To avert this they would\nneed to pin those at the last version compatible with Python 2. Users\nthat want to use older python versions should not have to go through so\nmuch anguish to do so.\n\nIn order to solve this problem, and thereby make both users' and\nmaintainers' lives easier, we ventured into the rabbit-hole called\nPackaging.\n\nThough we set off with a singular quest, our tale roves through many\nlands. We'll narrate the story of our amending PEPs, our efforts in\nbuilding the ramparts of the pypa/Warehouse Castle, battles with the\ndragons of Pip, and errands in the \"land of no unit tests\" otherwise\nknown as PyPI legacy.\n\nBy the end of the above tale, the audience members will know the road to\nPython 3 only libraries had once had hazards that are now easily\navoidable. So long as users upgrade their package management tools.\n",
  "duration": 1896,
  "language": "eng",
  "recorded": "2017-05-20",
  "speakers": [
    "Matthias Bussonnier",
    "Mike Pacer"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/2DkfPzWWC2Q/hqdefault.jpg",
  "title": "Ending Py2Py3 compatibility in a user friendly manner   PyCon 2017",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=2DkfPzWWC2Q"
    }
  ]
}
