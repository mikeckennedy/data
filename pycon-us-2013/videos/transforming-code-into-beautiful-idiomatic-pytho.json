{
  "alias": "video/1780/transforming-code-into-beautiful-idiomatic-pytho",
  "category": "PyCon US 2013",
  "copyright_text": "CC",
  "description": "",
  "duration": null,
  "id": 1780,
  "language": "eng",
  "quality_notes": "",
  "recorded": "2013-03-15",
  "related_urls": [
    "https://speakerdeck.com/pyconslides/transforming-code-into-beautiful-idiomatic-python-by-raymond-hettinger-1"
  ],
  "slug": "transforming-code-into-beautiful-idiomatic-pytho",
  "speakers": [
    "Raymond Hettinger"
  ],
  "summary": "Learn to take better advantage of Python's best features and improve\nexisting code through a series of code transformations, \"When you see\nthis, do that instead.\"\n\n\nTimetable:\n\n* `03:04 </watch?v=OSGv2VnC0go&t=184s>`__ -- Looping over a range of functions\n* `04:47 </watch?v=OSGv2VnC0go&t=287s>`__ -- Looping over a collection\n* `05:28 </watch?v=OSGv2VnC0go&t=328s>`__ -- Looping backwards\n* `06:51 </watch?v=OSGv2VnC0go&t=411s>`__ -- Looping over a collection of indicies\n* `07:36 </watch?v=OSGv2VnC0go&t=456s>`__ -- Looping over two collections\n* `09:42 </watch?v=OSGv2VnC0go&t=582s>`__ -- Looping in sorted order\n* `10:04 </watch?v=OSGv2VnC0go&t=604s>`__ -- Custom sort order\n* `12:27 </watch?v=OSGv2VnC0go&t=747s>`__ -- Call a function until a sentinel value\n* `15:52 </watch?v=OSGv2VnC0go&t=952s>`__ -- Distinguishing multiple exit points in loops\n* `19:18 </watch?v=OSGv2VnC0go&t=1158s>`__ -- Looping over dictionary keys\n* `21:10 </watch?v=OSGv2VnC0go&t=1270s>`__ -- Looping over dictionary keys and values\n* `21:52 </watch?v=OSGv2VnC0go&t=1312s>`__ -- Construct a dictionary from pairs\n* `23:15 </watch?v=OSGv2VnC0go&t=1395s>`__ -- Counting with dictionaries\n* `25:30 </watch?v=OSGv2VnC0go&t=1530s>`__ -- Grouping with dictionaries\n* `27:57 </watch?v=OSGv2VnC0go&t=1677s>`__ -- Is a dictionary pop() atomic?\n* `29:12 </watch?v=OSGv2VnC0go&t=1752s>`__ -- Linking dictionaries\n* `31:10 </watch?v=OSGv2VnC0go&t=1870s>`__ -- Clarify function calls with keyword arguments\n* `32:17 </watch?v=OSGv2VnC0go&t=1937s>`__ -- Clarify multiple return values with named tuples\n* `33:13 </watch?v=OSGv2VnC0go&t=1993s>`__ -- Unpacking sequences\n* `34:01 </watch?v=OSGv2VnC0go&t=2041s>`__ -- Updating multiple state variables\n* `36:15 </watch?v=OSGv2VnC0go&t=2175s>`__ -- Simultaneous state updates\n* `38:24 </watch?v=OSGv2VnC0go&t=2304s>`__ -- Concatenating strings\n* `38:41 </watch?v=OSGv2VnC0go&t=2321s>`__ -- Updating sequences\n* `39:57 </watch?v=OSGv2VnC0go&t=2397s>`__ -- Using decorators to factor-out administrative logic\n* `40:24 </watch?v=OSGv2VnC0go&t=2424s>`__ -- Caching decorator\n* `41:19 </watch?v=OSGv2VnC0go&t=2479s>`__ -- Factor-out temporary contexts for decimal\n* `42:01 </watch?v=OSGv2VnC0go&t=2521s>`__ -- How to open and close files\n* `42:25 </watch?v=OSGv2VnC0go&t=2545s>`__ -- How to use locks\n* `43:10 </watch?v=OSGv2VnC0go&t=2590s>`__ -- Factor-out temporary contexts\n* `44:56 </watch?v=OSGv2VnC0go&t=2696s>`__ -- Context manager: redirect_stdout()\n* `46:04 </watch?v=OSGv2VnC0go&t=2764s>`__ -- Concise expressive one-liners",
  "tags": [
    "talk",
    "python3",
    "pythonic"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/OSGv2VnC0go/hqdefault.jpg",
  "title": "Transforming Code into Beautiful, Idiomatic Python",
  "videos": [
    {
      "type": "mp4",
      "url": "http://s3.us.archive.org/nextdayvideo/psf/pycon2013/Transforming_Code_into_Beautif.mp4?Signature=J6w1HSr4D1uQ3OLB9DYMWgef64g%3D&Expires=1363841075&AWSAccessKeyId=FEWGReWX3QbNk0h3"
    },
    {
      "length": 0,
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=OSGv2VnC0go"
    }
  ]
}
