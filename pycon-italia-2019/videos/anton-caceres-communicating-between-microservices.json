{
  "copyright_text": null,
  "description": "Microservices are not just a bunch of little apps, it\u2019s a connected\necosystem.\n\nWithin a monolith, code modules invoke each other simply by using\nlanguage- level function calls, but in a microservice architecture,\ncommunication between components does not come for free anymore.\nChoosing not just a protocol, but a paradigm for communication between\nendpoints is considered the most tricky issue of microservice approach.\n\nWriting microservices in Python is a joy, but when you decide on it,\nthere is often no way back. Therefore it is always an advantage to know\nwhat to expect in advance, not just from inspiring blog posts but also\nfrom the harsh reality.\n\nHaving a bunch of smooth as well as tricky microservice migrations in\nthe past, I would like to share typical pitfalls of choosing a framework\nstack, communication protocol, conventions, and deployment process \u2014 all\ncovered by real projects.\n\n**Feedback form:** https://python.it/feedback-1638\n\nin \\_\\_on **Saturday 4 May** at 17:15 `**See\nschedule** </en/sprints/schedule/pycon10/>`__\n",
  "duration": 1740,
  "language": "eng",
  "recorded": "2019-05-04",
  "related_urls": [
    {
      "label": "Conference schedule",
      "url": "https://www.pycon.it/p3/schedule/pycon10/"
    }
  ],
  "speakers": [
    "Anton Caceres"
  ],
  "tags": [
    "MessageQueues",
    "microservices",
    "HTTP",
    "communication",
    "architecture",
    "websockets"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/UhXehonvzwE/maxresdefault.jpg",
  "title": "Communicating Between Microservices",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=UhXehonvzwE"
    }
  ]
}
