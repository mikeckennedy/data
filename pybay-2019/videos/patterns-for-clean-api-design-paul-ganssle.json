{
  "description": "This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.\n\nDescription\nThis talk will arm you with some tools to design a library that \"just works\", but also has obvious escape hatches to handle corner cases. It covers several patterns for cleanly organizing related and overlapping functionality in a way that satisfies both humans and static analysis tools.\n\nAbstract\nWhat do you do when you have to choose between designing your function for one of two common use cases?\n\nHow about when the same logical operations (say, multiplication or concatenation) need to have different implementations depending on the type of the arguments they are applied to?\n\nThese kinds of questions can be vexing when trying to design a clean, well-scoped API.\n\nThis talk will cover several strategies for grouping related functionality in a way that presents a logically clean interface to both humans and static analysis tools like type checkers and document generators.\n\nThis talk covers:\n\nAlternate constructors with @classmethod\nInheritance with @staticmethod and @classmethod\nDispatch by type\nA new convention for namespacing functions: variants\n\nAbout the speaker\nPaul Ganssle is a software developer at Google, maintainer of python-dateutil and setuptools, Python core developer and contributor to many other open source projects. He lives in New York City and is interested in programming, languages, wearable electronics and sensors.\n\nExpressions of opinion do not necessarily reflect the views of his employer.\n\nSponsor Acknowledgement\nThis and other PyBay2019 videos are via the help of our media partner AlphaVoice (https://www.alphavoice.io/)!\n\n#pybay #pybay2019 #python #python3 #gdb",
  "language": "eng",
  "recorded": "2019-08-16",
  "speakers": [
    "Paul Ganssle"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/9rKx-8bj-R0/hqdefault.jpg",
  "title": "Patterns for Clean API Design",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=9rKx-8bj-R0"
    }
  ]
}
