{
  "description": "Nearly everyone (especially in the Python community) agrees that good\ndocumentation is important to the success of software projects, and yet\nvery few projects actually have good documentation.\n\nOften, it's *not for want of effort* - the project's developers have\nworked hard on it - *nor for lack of documentation* - the authors have\nproduced a lot of it.\n\n*It simply turns out to be not very good* - not helpful enough for the\nusers who should be able to rely on it, and a depressing chore for the\nauthors who have to maintain it.\n\nThe good news is that both these problems can be solved by understanding\n*how documentation works*, and what its different functions are.\nStructuring documentation according to those distinct functions helps\nensure that each of them is adequately served. It also makes it far\neasier to write and maintain.\n\nUsing real-life examples I'll draw out the key functions of\ndocumentation, and how they map onto different ways of writing it.\nPutting this into practice is simple when armed with some basic\nguidelines. The benefits are huge, and available with a minimum of\neffort.\n\nI won't be discussing documentation tools or software or other topics\nthat have been covered amply elsewhere, but some neglected aspects of\nsoftware documentation that **will make your software projects more\nsuccessful**.\n",
  "duration": 1955,
  "recorded": "2017-05-20",
  "speakers": [
    "Daniele Procida"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/azf6yzuJt54/hqdefault.jpg",
  "title": "How documentation works, and how to make it work for your project",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=azf6yzuJt54"
    }
  ]
}
