{
  "copyright_text": null,
  "description": "Mocking and patching are powerful techniques for testing, but they can\nbe easily abused, with negative effects on code quality, maintenance,\nand application architecture. These pain-points can be hard to\nverbalize, and consequently hard to address. If your unit tests are a\nPITA, but you cannot explain why, this talk may be for you.\n\nMocking as a technique has deep roots within OOD and TDD, going back 20+\nyears, but many Python developers know mocks and patches merely as a\ntechnique to isolate code under test. In the absence of knowledge around\nOOD and TDD, best practices around mocking are completely unknown,\nmisunderstood, or ignored. Developers who use mocks and patches without\ndoing TDD or OOD are susceptible to falling into many well-understood\nand documented traps.\n\nThis talk will draw a historical connection between the way mocks are\ntaught today, and their origins in TDD, OOD, and Java. It will also\ndemonstrate some pitfalls, and provide some guidance and alternatives to\nmocking and patching (e.g., dependency injection, test doubles,\nfunctional style).\n",
  "duration": 2834,
  "language": "eng",
  "recorded": "2019-05-03T13:40:00",
  "related_urls": [
    {
      "label": "Conference schedule",
      "url": "https://us.pycon.org/2019/schedule/talks/"
    },
    {
      "label": "Conference slides (github)",
      "url": "https://github.com/PyCon/2019-slides"
    },
    {
      "label": "Conference slides (speakerdeck)",
      "url": "https://speakerdeck.com/pycon2019"
    },
    {
      "label": "Talk schedule",
      "url": "https://us.pycon.org/2019/schedule/presentation/216/"
    }
  ],
  "speakers": [
    "Edwin Jung"
  ],
  "tags": [
    "talk"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/Ldlz4V-UCFw/maxresdefault.jpg",
  "title": "Mocking and Patching Pitfalls",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=Ldlz4V-UCFw"
    }
  ]
}
