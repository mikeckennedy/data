{
  "description": "Python is well known as a language that does not execute computationally\nintensive programs quickly. Traditionally, Cython and/or NumPy have been\nthe tools to speed things up. There is interest in Numba as a new way\nforward. However C++14, D, Chapel, and possibly Rust, maybe Go, are\nthere, are much easier to work with than you might think, and lead to\nvery high performance and easily maintained code.\n\nIn this session we will look at a couple of example codes to provide\nsignposts as to how we can take a more polyglot approach to the\nconstruction of computationally intensive systems.\n",
  "duration": 2513,
  "language": "eng",
  "recorded": "2015-06-20",
  "speakers": [
    "Russel Winder"
  ],
  "summary": "This session is about using native code with Python to ensure\ncomputationally intensive programs execute as fast as is possible.",
  "thumbnail_url": "https://i.ytimg.com/vi/T138eQjEASs/hqdefault.jpg",
  "title": "Making Computations Execute Very Quickly",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=T138eQjEASs"
    }
  ]
}
