{
  "alias": "video/1209/bringing-high-performance-to-pythonnumpy-without",
  "category": "SciPy 2012",
  "copyright_text": "CC BY-SA",
  "description": "Recent years have provided a wealth of projects showing that using\nPython for scientific applications outperforms even popular choices such\nas Matlab. A major factor driving these successes is the efficient\nutilization of multi- cores, GPUs for general-purpose computation and\nscaling computations to clusters.\n\nHowever, often these advances sacrifice some of the high-productivity\nfeatures of Python by introducing new language constructs, enforcing new\nlanguage semantics and/or enforcing explicit data types. The result is\nthat the user will have to rewrite existing Python applications to use\nthe Python extension.\n\nIn order to use GPGPUs in Python, a popular approach is to embed\nCUDA/OpenCL code kernels directly in the Python application. The\nprogramming productivity of this approach is better and more readable\nthan C/C++ applications but it is still inferior to native Python code.\nFurthermore, the approach enforces hardware specific programming and\nthus requires intimate knowledge of the underlying hardware and the\nCUDA/OpenCL programming model.\n\nCopenhagen Vector Byte Code (cphVB) strives to provide a\nhigh-performance back-end for Numerical Python (NumPy) without reducing\nthe high-productivity of Python/NumPy. Without any involvement of the\nuser, cphVB will transform regular sequential Python/NumPy applications\ninto high-performance applications. The cphVB runtime system is capable\nof utilizing a broad range of computing platforms efficiently, e.g.\nMulti-core CPUs, GPGPUs and clusters of such machines.\n\ncphVB consists of a bridge that translates NumPy array operations into\ncphVB vector operations. The bridge will send these vector operations to\na Vector Engine that performs the actual execution of the operations.\ncphVB comes with a broad range of Vector Engines optimized to specific\nhardware architectures, such as multi-core CPUs, GPGPU and clusters of\nsaid architectures. Thus, cphVB provides a high-productivity,\nhigh-performance framework that support legacy NumPy applications\nwithout changing a single line of code.\n",
  "duration": null,
  "id": 1209,
  "language": "eng",
  "quality_notes": "",
  "recorded": "2012-07-18",
  "slug": "bringing-high-performance-to-pythonnumpy-without",
  "speakers": [
    "Brian Vinter",
    "Mads Ruben Burgdorff Kristensen",
    "Simon Andreas Frimann Lund",
    "Troels Blum"
  ],
  "summary": "",
  "tags": [
    "hpc"
  ],
  "thumbnail_url": "https://i1.ytimg.com/vi/HFxn3mSp9ww/hqdefault.jpg",
  "title": "Bringing High Performance to Python/Numpy Without Changing a Single Line of Code.",
  "videos": [
    {
      "type": "mp4",
      "url": "http://s3.us.archive.org/nextdayvideo/enthought/scipy_2012/Bringing_High_Performance_to_P.mp4?Signature=w983Dyy%2Fzuho%2FUZhUhfx1A0vcAY%3D&Expires=1346444523&AWSAccessKeyId=FEWGReWX3QbNk0h3"
    },
    {
      "length": 0,
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=HFxn3mSp9ww"
    }
  ]
}
