{
  "copyright_text": null,
  "description": "Decorators are one of Python's most powerful features. But even if you\nunderstand what they do, it's not always obvious what you can do with\nthem. Sure, from a practical perspective, they let you remove repeated\ncode from your callables. And semantically, they let you think at a\nhigher level of abstraction, applying the same treatment to functions\nand classes.\n\nBut what can you actually do with them? For many Python developers I've\nencountered, ecorators sometimes appear to be a solution looking for a\nproblem.\n\nIn this talk, I'll show you some practical uses for decorators, and how\nyou can use them to make your code more readable and maintainable, while\nalso providing more semantic power. Moreover, you'll see examples of\nthings would be hard to do without decorators. I hope that after this\ntalk, you'll have a good sense of how to use decorators in your own\nPython projects.\n",
  "duration": 1752,
  "language": "eng",
  "recorded": "2019-05-03T10:50:00",
  "related_urls": [
    {
      "label": "Conference schedule",
      "url": "https://us.pycon.org/2019/schedule/talks/"
    },
    {
      "label": "Conference slides (github)",
      "url": "https://github.com/PyCon/2019-slides"
    },
    {
      "label": "Conference slides (speakerdeck)",
      "url": "https://speakerdeck.com/pycon2019"
    },
    {
      "label": "Talk schedule",
      "url": "https://us.pycon.org/2019/schedule/presentation/194/"
    }
  ],
  "speakers": [
    "Reuven M. Lerner"
  ],
  "tags": [
    "talk"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/MjHpMCIvwsY/maxresdefault.jpg",
  "title": "Practical decorators",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=MjHpMCIvwsY"
    }
  ]
}
