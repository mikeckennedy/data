{
  "description": "Requests is widely acknowledged as a library that saves users an\nenormous amount of time, effort, and pain through its intuitive and\nclear API. For this reason, most people who have never looked at the\ncode assume that its code is as intuitive, well-structured, and clear as\nthe API.\n\nOf course, the truth is more complex than that. Real software that deals\nwith real problems is rarely ideal: there are edge cases, terrible\nhacks, and awkward workarounds for problems.\n\nOften in the software industry we pretend that these imperfections in\nour software don\u2019t exist, or we try to hide them. These imperfections\nfrequently cause people to reinvent wheels in order to simplify the\ncode, which has benefits for understandability but frequently has\ndownsides for resilience. When people talk about \u201cbattle-tested\u201d code,\nthey mean code that has been dirtied up over time from its original\nPlatonic ideal implementation to something that is just as complex and\nwarty as real life.\n\nIn this talk, one of the Requests and urllib3 core maintainers lays bare\nall of the worst and hackiest corners of the codebases of these two\nlibraries. The goal is to help expose all of the invisible work done in\nmature codebases to tolerate edge cases and misbehaviour, as well as to\ntry to remind us all that the perfect is the enemy of the good.\n",
  "duration": 1898,
  "recorded": "2017-05-19",
  "speakers": [
    "Cory Benfield"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/ptbCIvve6-k/hqdefault.jpg",
  "title": "Requests Under The Hood",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=ptbCIvve6-k"
    }
  ]
}
