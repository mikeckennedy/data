{
  "copyright_text": null,
  "description": "High unit-test coverage is great, but it cannot effectively find bugs triggered by interactions between multiple features. Since it is not scalable to write tests for all possible interactions, we turn to property-based testing - an approach where we generate tests instead of writing them.  Property-based testing (PBT) is a random-testing approach that first became popular in the Haskell community as QuickCheck. It works by generating random examples to find minimal counterexamples to a pattern or law that ought to always hold true. PBT is especially useful in testing edge cases and interactions between multiple features, particularly in stateful systems. This talk introduces the principles of PBT along with its history and success stories. We then illustrate PBT patterns and examples in Python using Hypothesis. Finally, we see how it fits in with TDD and integration testing.",
  "duration": 2451,
  "language": "eng",
  "recorded": "2019-02-23",
  "related_urls": [
    {
      "label": "Conference schedule",
      "url": "https://pycon.python.ph"
    }
  ],
  "speakers": [
    "Anthony Khong"
  ],
  "tags": [
    "hypothesis",
    "testing"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/58pvnRJ0prI/maxresdefault.jpg",
  "title": "Property Based Testing in Python with Hypothesis",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=58pvnRJ0prI"
    }
  ]
}
