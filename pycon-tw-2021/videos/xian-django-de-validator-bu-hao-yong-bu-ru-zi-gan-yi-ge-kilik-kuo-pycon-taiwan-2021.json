{
    "description": "Day 2, 13:55-14:25\n\nAbstract\n\nDjango Validator \u53ef\u4ee5\u662f\u8cc7\u6599\u5728\u9032\u5165 DB \u524d\u6700\u7d42\u7684\u5b88\u9580\u54e1\uff0c\u4f46\u96e3\u9053\u6211\u5011\u5fc5\u9808\u8d70\u5230\u6700\u5f8c\u4e00\u6b65(\u6e96\u5099\u5beb\u5165 DB)\u624d\u80fd\u767c\u73fe\u5916\u90e8\u50b3\u4f86\u7684\u8cc7\u6599\u6c92\u6709\u7b26\u5408\u898f\u7bc4\u55ce\uff1f \u82e5\u4e4b\u524d\u696d\u52d9\u908f\u8f2f\u5df2\u89f8\u78b0\u9ad2\u8cc7\u6599\u800c\u5c0e\u81f4\u554f\u984c, \u6211\u5011\u662f\u5426\u8981\u5728\u7a0b\u5f0f\u78bc\u88e1\u9762\u52a0\u4e0a\u8a31\u591a\u932f\u8aa4\u8655\u7406? \u9019\u6a23\u7684\u554f\u984c\u5728\u5f15\u5165 DRF(Django Rest Framework)\u7684 ModelSerializer \u5f8c\u6703\u6709\u89e3\u6c7a\u8fa6\u6cd5\u55ce\uff1f \u6211\u5e0c\u671b\u900f\u904e\u4ecb\u7d39 Django Validator/Serializer \u7684\u8a2d\u8a08\u76ee\u7684\u8207\u4f7f\u7528\u6642\u6a5f, \u4e26\u5f15\u51fa\u5728\u516c\u53f8\u5c08\u6848\u5167\u4f7f\u7528\u4e0a\u7684\u4e0d\u4fbf\u4e4b\u8655. \u5982\u679c\u4e0a\u8ff0\u5404\u7a2e\u65b9\u6cd5\u90fd\u6709\u75db\u9ede, \u90a3\u4e0d\u5982\u5c31\u81ea\u505a\u4e00\u5957 HTTP request validation \u7684\u6a5f\u5236\u5427 ! \u60f3\u8981\u9054\u6210\u54ea\u4e9b\u76ee\u6a19 ? 1. \u5920\u7c21\u55ae\u7528, \u4e14\u4f9d\u8cf4\u4f4e 2. \u4e0d\u53ea\u5728 Django Framework \u5167\u53ef\u7528, \u55ae\u7d14 Python \u51fd\u5f0f\u53c3\u6578\u9a57\u8b49\u4e5f\u80fd\u4f7f\u7528 3. \u4fbf\u65bc\u65e5\u5f8c\u88fd\u4f5c API spec document 4. \u5bb9\u6613\u64f4\u5c55\u65b0\u7684\u9a57\u8b49\u689d\u4ef6 5. \u76e1\u53ef\u80fd functional programming (\u7d14\u7cb9\u723d) \u5411\u5404\u4f4d\u4ecb\u7d39 HARDCORE - \"SPEC\"\n\nDescription\n\nDjango framework \u4e00\u958b\u59cb\u8a95\u751f\u7684\u4e3b\u8981\u7684\u76ee\u6a19\u662f\u70ba\u4e86\u7c21\u5316\u4ee5\u8cc7\u6599\u5eab\u70ba\u9a45\u52d5\u7684\u7db2\u7ad9\u958b\u767c, \u5be6\u969b\u4f7f\u7528\u4e0a\u5247\u662f\u5c07\u67b6\u69cb\u5206\u6210 Template/View/Model \u4e09\u5927\u5340\u584a\u4e26\u505a\u76f4\u63a5\u7684\u4e32\u63a5. \u9019\u4e5f\u8b93\u5176\u8a2d\u8a08\u7684 Serializer \u7cfb\u7d71\u8457\u91cd\u5728\u4e0d\u540c\u8cc7\u6599\u985e\u578b(xml/ymal/json/python/queryset)\u7684\u5e8f\u5217\u5316\u8f49\u63db\u800c\u5ffd\u7565\u4e86\u9a57\u8b49\u8cc7\u6599\u7684\u5408\u898f\u6027. \u800c\u5176 Validator \u7684\u8cc7\u6599\u9a57\u8b49\u7cfb\u7d71\u53ea\u8457\u91cd\u5728 a) \u8cc7\u6599\u9032\u5165\u8cc7\u6599\u5eab\u6b04\u4f4d\u6642\u7684\u9a57\u8b49 b) \u5c07 Template \u8868\u55ae\u6b04\u4f4d\u8f38\u5165\u503c\u8f49\u63db\u6210 view \u5167\u8b8a\u6578\u6642\u7684\u9a57\u8b49. \u9019\u7522\u751f\u4e86\u5169\u500b\u554f\u984c 1) \u7121\u6cd5\u91dd\u5c0d GET \u4f7f\u7528\u7684 query paramerter \u9032\u884c\u9a57\u8b49 2) Validator \u5fc5\u9808\u642d\u914d\u8868\u55ae (Form) \u4f7f\u7528, \u7b49\u540c\u65bc\u5404\u6b04\u4f4d\u8a2d\u8a08\u5fc5\u9808\u57fa\u65bc Field, \u624d\u80fd\u5c07 validator \u690d\u5165 Field \u7684 default_validators list \u5167.\n\n\u4e0a\u8ff0\u7684\u4f7f\u7528\u60c5\u5883\u8207\u9650\u5236, \u7121\u6cd5\u5145\u5206\u5730\u6eff\u8db3\u516c\u53f8\u5167\u90e8\u5c08\u6848\u7684\u9700\u6c42, \u73fe\u5be6\u7684\u72c0\u6cc1\u662f\u7576\u5c08\u6848\u7206\u9577, \u8a31\u591a\u9801\u9762\u958b\u59cb\u5229\u7528\u524d\u7aef\u6846\u67b6\u9032\u884c\u6e32\u67d3, template \u4e0a\u4e0d\u4e00\u5b9a\u6703\u4f7f\u7528 form; \u800c\u5f8c\u7aef\u66f4\u5f15\u5165 DRF, \u4f7f\u5f97 API \u7684\u8a2d\u8a08\u898f\u7bc4\u51fa\u73fe\u66f4\u591a\u5206\u6b67(function v.s view class v.s. APIView-like), ModelSerializer \u7684\u51fa\u73fe\u5c0e\u81f4\u5de5\u7a0b\u5e2b\u5bb9\u6613\u5728 APIView \u5167\u6feb\u7528 serializer.is_valid \u4f5c\u70ba API request \u8207\u8cc7\u6599\u9032\u5165 model \u7684\u552f\u4e00\u6aa2\u67e5\u624b\u6bb5. \u4e45\u4e4b, \u7576 view \u88e1\u9762\u7684\u5546\u696d\u908f\u8f2f\u8d8a\u4f86\u8d8a\u591a, \u4f46\u537b\u90fd\u5e0c\u671b\u52c1\u91cf\u9760\u8fd1\u570d\u7e5e\u8457 serializer \u4f86\u78ba\u4fdd\u4f7f\u7528\u8cc7\u6599\u5408\u4e4e\u898f\u7bc4, \u7a0b\u5f0f\u78bc\u8026\u5408\u6027\u8b8a\u9ad8, \u8d8a\u96e3\u8077\u8cac\u5207\u5272, \u958b\u59cb\u5bb9\u6613\u758a\u5e8a\u67b6\u5c4b...\n\n\u5e7e\u7d93\u601d\u8003, \u6c7a\u5b9a\u660e\u78ba\u5c07 API \u8a2d\u8a08\u65b9\u5411\u5207\u6210\u6578\u500b\u90e8\u5206,\n\nAPI \u9032\u5165\u9ede\u90e8\u5206\n\u5546\u696d\u908f\u8f2f\u90e8\u5206\nAPI \u8fd4\u56de\u503c\u90e8\u5206\n\u7b2c\u4e00\u90e8\u5206: API \u9032\u5165\u9ede.\n\u9019\u88e1\u6703\u6709 HTTP request \u900f\u904e view \u7684 get/post function \u88ab\u50b3\u5165, \u6211\u5011\u53ef\u4ee5\u5728\u6b64\u8655\u9032\u884c\u6240\u6709\u53c3\u6578\u7684\u9a57\u8b49.\n\u4e00\u4f86\u907f\u514d\u932f\u8aa4\u6216\u60e1\u610f\u7684\u53c3\u6578\u5728\u63a5\u4e0b\u4f86\u7684\u7a0b\u5f0f\u78bc\u4e2d\u88ab\u4f7f\u7528\u5c0e\u81f4\u4e0d\u9810\u671f\u7684\u932f\u8aa4, \u4e8c\u4f86\u5118\u65e9\u53c3\u6578\u9a57\u8b49\u4e5f\u80fd\u6e1b\u5c11\u5f8c\u9762\u4e0d\u5fc5\u8981\u7684\u6aa2\u67e5\u7a0b\u5f0f\u78bc.\n\n\u7b2c\u4e8c\u90e8\u5206: \u5546\u696d\u908f\u8f2f\u90e8\u5206\n\u6b64\u8655\u53ef\u4ee5\u653e\u5fc3\u5c07\u53c3\u6578\u62ff\u51fa\u4f86\u4f7f\u7528, \u4e26\u4e14\u5c08\u6ce8\u5728\u5546\u696d\u908f\u8f2f.\n\n\u7b2c\u4e09\u90e8\u5206: \u5c07\u4e0a\u8ff0\u7522\u751f\u7684\u7d50\u679c, \u7d93\u7531\u5ba2\u88fd\u5316\u7684 response serializer \u8f49\u63db\u6210\u524d\u7aef\u4f7f\u7528\u7684\u8cc7\u6599\u683c\u5f0f.\n\n\u9019\u88e1\u53ef\u4ee5\u770b\u51fa\u53e6\u4e00\u500b\u554f\u984c, DRF APIView \u7684\u8a2d\u8a08\u53ea\u8b93\u4f7f\u7528\u8005\u6307\u5b9a\u4e00\u500b serializer class, \u4f46\u5176\u5be6\u9019\u4e09\u500b\u90e8\u5206\u90fd\u6709\u9700\u8981\u505a\u985e\u4f3c\u7684\u4e8b\u60c5\u800c\u4e14\u6b04\u4f4d\u53ef\u80fd\u4e0d\u540c. (\u984c\u5916\u8a71)\n\n\u65bc\u662f\u6211\u5011\u5c08\u6ce8\u5728\u7b2c\u4e00\u90e8\u5206, \u5c07 View/APIView \u7684 HTTP method \u4ecb\u9762\u505a\u4e86\u5206\u6790, \u6982\u5ff5\u4e0a\u662f\u5c07\u8cc7\u6599( request.GET/request.POST (Django View) \u6216\u662f request.query_params, request.data (DRF APIView)) \u5f9e request \u622a\u51fa, \u9032\u5165\u53c3\u6578\u9a57\u8b49\u6d41\u7a0b, \u5c07\u9a57\u8b49\u7d50\u679c(\u6210\u529f\u6216\u5931\u6557)\u6536\u96c6\u8d77\u4f86, \u4e26\u6839\u64da\u4f8b\u5916\u512a\u5148\u6b0a\u4f86\u6c7a\u5b9a\u8981\u56de\u50b3\u54ea\u500b\u932f\u8aa4.\n\u66f4\u591a\u7d30\u7bc0\u4ecb\u7d39\u7d93\u6703\u900f\u904e\u6295\u5f71\u7247, \u7528\u7a0b\u5f0f\u78bc\u7684\u65b9\u5f0f\u4f86\u89e3\u8b1b.\n\nSlides not uploaded by the speaker.\nHackMD: https://hackmd.io/@pycontw/2021/%2F%40pycontw%2FH1d5N45Mt\n\nSpeaker: Kilik Kuo\n\n\u6539\u8b8a\u81ea\u5df1\u5148, \u5f71\u97ff\u4e16\u754c\u5f8c. https://www.linkedin.com/in/kilik-kuo-3923a454/",
    "speakers": [
        "Kilik Kuo"
    ],
    "recorded": "2021-10-03",
    "title": "\u5acc Django \u7684 Validator \u4e0d\u597d\u7528 !? \u4e0d\u5982\u81ea\u5e79\u4e00\u500b \u2013 Kilik Kuo (PyCon Taiwan 2021)",
    "thumbnail_url": "https://i.ytimg.com/vi/urOLJqX0lZ0/hqdefault.jpg",
    "videos": [
        {
            "type": "youtube",
            "url": "https://www.youtube.com/watch?v=urOLJqX0lZ0"
        }
    ]
}