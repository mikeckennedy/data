{
  "alias": "video/1999/high-performance-reproducible-computing-scipy-20",
  "category": "SciPy 2013",
  "copyright_text": "https://www.youtube.com/t/terms",
  "description": "",
  "duration": null,
  "id": 1999,
  "language": "eng",
  "quality_notes": "",
  "recorded": "2013-07-02",
  "slug": "high-performance-reproducible-computing-scipy-20",
  "speakers": [],
  "summary": "Authors: Zhang, Zhang, Intel Corporation; Rosenquist, Todd, Intel\nCorporation; Moffat, Kent, Intel Corporation\n\nTrack: General\n\nThe call for reproducible computational results in scientific research\nareas has increasingly resonated in recent years. Given that a lot of\nresearch work uses mathematical tools and relies on modern high\nperformance computers for numerical computation, obtaining reproducible\nfloating-point computation results becomes fundamentally important in\nensuring that research work is reproducible.\n\nIt is well understood that, generally, operations involving IEEE\nfloating-point numbers are not associative. For example, (a+b)+c may not\nequal a+(b+c). Different orders of operations may lead to different\nresults. But exploiting parallelism in modern performance-oriented\ncomputer systems has typically implied out-of-order execution. This\nposes a great challenge to researchers who need exactly the same\nnumerical results from run to run, and across different systems.\n\nThis talk describes how to use tools such as Intel\u00ae Math Kernel Library\n(Intel\u00ae MKL) and Intel\u00ae compilers to build numerical reproducibility\ninto Python based tools. Intel\u00ae MKL includes a feature called\nConditional Numerical Reproducibility that allows users to get\nreproducible floating-point results when calling functions from the\nlibrary. Intel\u00ae compilers provide broader solutions to ensure the\ncompiler-generated code produces reproducible results. We demonstrate\nthat scientific computing with Python can be numerically reproducible\nwithout losing much of the performance offered by modern computers. Our\ndiscussion focuses on providing different levels of controls to obtain\nreproducibility on the same system, across multiple generations of Intel\narchitectures, and across Intel architectures and Intel-compatible\narchitectures. Performance impact of each level of controls is discussed\nin detail. Our conclusion is that, there is usually a certain degree of\ntrade-off between reproducibility and performance. The approach we take\ngives the end users many choices of balancing the requirement of\nreproducible results with the speed of computing.\n\nThis talk uses NumPy/SciPy as an example, but the principles and the\nmethodologies presented apply to any Python tools for scientific\ncomputing.\n",
  "tags": [
    "Tech"
  ],
  "thumbnail_url": "https://i1.ytimg.com/vi/GIlp4rubv8U/hqdefault.jpg",
  "title": "High Performance Reproducible Computing; SciPy 2013 Presentation",
  "videos": [
    {
      "length": 0,
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=GIlp4rubv8U"
    }
  ]
}
