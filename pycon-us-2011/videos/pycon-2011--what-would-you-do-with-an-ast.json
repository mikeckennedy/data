{
  "alias": "video/419/pycon-2011--what-would-you-do-with-an-ast",
  "category": "PyCon US 2011",
  "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
  "description": "What would you do with an ast?\n\nPresented by Matthew J Desmarais\n\nThe ast module in the Python (>= 2.6) standard library provides a\nrepresentation of python code in a python data structure. We'll begin\nwith a discussion about what an abstract syntax tree is and why it's\nuseful. We can then talk about what's available in the ast module, how\nit works, and how you can use it. This will be a practical session built\naround examples examining and modifying live ASTs.\n\nAbstract\n\nI would prefer to make this a 45 minute talk with examination of code\nsamples.\n\nPython 2.6 introduced a new module in the standard library, ast. The\nfirst line of the ast documentation is, \"The ast module helps Python\napplications to process trees of the Python abstract syntax grammar.\"\nWhat this means is not obvious and many, if not most, python programmers\nwon't know what this means. I will begin by talking about the idea of\nsyntax tree and how it fits into the python execution lifecycle. I will\nalso talk about the contents of the ast module. I will cover the\navailable ast.Node subclasses and the provided helper functions,\nincluding the NodeVisitor and NodeTransformer. I will finish by talking\nabout how the ast module can be used to analyze Python code and how it\ncan be used to generate new code.\n\nI expect the time to break down roughly like this:\n\nIntroduction ( 5m )\n\n-  Capacitor joke\n-  What is an abstract syntax tree?\n-  How they are used by the Python interpreter\n\nThe contents of the ast module (20 m)\n\n-  The node subclasses and the ast ( 10m )\n\n   -  How you get an ast.\n   -  code examples\n   -  ast.stmt vs. ast.expr\n   -  peculiarities\n   -  code examples\n\n      -  elif as syntactic sugar for \"if: else: if:\"\n      -  comparison operators\n\n   -  Why this is useful.\n   -  the ast is the \"truth\" of the program\n\n      -  code examples\n      -  tricky code\n\n-  The ast module helpers ( 10m )\n\n   -  visitor pattern\n   -  NodeVisitor\n   -  NodeTransformer\n   -  code examples\n\nWhat you do with an ast ( 15m )\n\n-  Walking an ast\n\n   -  code examples\n   -  a simple visitor to gather variables by scope\n\n-  Creating/Modifying an ast\n\n   -  code examples\n   -  rearrange imports transformer\n   -  naive \"rename all instances\" transformer\n   -  naive macro expansion transformer\n\nConclusion ( 5m )\n\n-  Practical Applications\n\n   -  existing projects\n   -  visitors\n\n      -  checkers (pylint, pyflakes)\n\n   -  transformers\n\n      -  refactoring tools (rope)\n\n-  When is it a good idea to use ast?\n\n",
  "duration": null,
  "id": 419,
  "language": "eng",
  "quality_notes": "",
  "recorded": "2011-03-11",
  "slug": "pycon-2011--what-would-you-do-with-an-ast",
  "speakers": [
    "Matthew J Desmarais"
  ],
  "summary": "",
  "tags": [
    "ast",
    "pycon",
    "pycon2011"
  ],
  "thumbnail_url": "https://archive.org/services/img/pyvideo_419___what-would-you-do-with-an-ast",
  "title": "What would you do with an ast?",
  "videos": [
    {
      "type": "archive.org",
      "url": "https://archive.org/details/pyvideo_419___what-would-you-do-with-an-ast"
    }
  ]
}
