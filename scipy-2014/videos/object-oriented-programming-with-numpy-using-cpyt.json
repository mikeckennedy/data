{
  "alias": "video/2733/object-oriented-programming-with-numpy-using-cpyt",
  "category": "SciPy 2014",
  "copyright_text": "https://www.youtube.com/t/terms",
  "description": "In the paper we compare object-oriented implementations of an advection\nalgorithm written in Python, C++ and modern FORTRAN. The MPDATA\nadvection algorithm (Multidimensional Positive-Definite Advective\nTransport Algorithm) used as a core of weather, ocean and climate\nmodelling systems serves as an example.\n\nIn the context of scientific programming, employment of object-oriented\nprogramming (OOP) techniques may help to improve code readability, and\nhence its auditability and maintainability. OOP offers, in particular,\nthe possibility to reproduce in the program code the mathematical\n\"blackboard abstractions\" used in the literature. We compare how the\nchoice of a particular language influences syntax clarity, code length\nand the performance: CPU time and memory usage.\n\nThe Python implementation of MPDATA is based on NumPy. Its performance\nis compared with C++/Blitz++ and FORTRAN implementations. A notable\nperformance gain when switching from the standard CPython to PyPy will\nbe exemplified, and the reasons for it will be briefly explained.\nDiscussion of other selected solutions for improving the NumPy\u2019s\nrelatively poor performance will be also presented.\n\nThis talk will describe and extend on the key findings presented in\nhttp://arxiv.org/abs/1301.1334.\n",
  "duration": null,
  "id": 2733,
  "language": "eng",
  "quality_notes": "",
  "recorded": "2014-07-09",
  "related_urls": [
    "http://arxiv.org/abs/1301.1334."
  ],
  "slug": "object-oriented-programming-with-numpy-using-cpyt",
  "speakers": [
    "Dorota Jarecka"
  ],
  "summary": "In the paper we compare object-oriented implementations of an advection\nalgorithm written in Python, C++ and modern FORTRAN. The main angles of\ncomparison are code brevity and syntax clarity (and hence\nmaintainability and auditability) as well as performance. A notable\nperformance gain when switching from CPython to PyPy will be\nexemplified, and the reasons for it will be briefly explained.\n",
  "tags": [
    "pypy"
  ],
  "thumbnail_url": "https://i1.ytimg.com/vi/i7rO2qPiesc/hqdefault.jpg",
  "title": "Object oriented Programming with NumPy using CPython & PyPy",
  "videos": [
    {
      "length": 0,
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=i7rO2qPiesc"
    }
  ]
}
