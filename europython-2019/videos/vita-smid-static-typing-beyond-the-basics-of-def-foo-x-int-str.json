{
  "copyright_text": "Creative Commons Attribution license (reuse allowed)",
  "description": "The Python community has been warming up to static typing for a few\nyears now. You may have seen talks that did a great job of introducing\nthe basic concepts, mypy, and high-level strategies to cover existing\ncode bases.\n\nWe need to go deeper.\n\nLet\u2019s talk about the challenges you inevitably encounter when you try to\ntype- check a large code base. One full of many moving parts, complex\narchitectures, metaprogramming tricks, and interfaces with a dozen other\npackages.\n\nStatic type checking is very powerful \u2013 when you use it to maximum\nadvantage and explain your code to the typechecker accurately. We will\ncover a few tools at your disposal: generics, signature overloads,\nprotocols, custom mypy plug- ins, and more.\n\nThere is more than just tools, though. Behind them all are universal\nconcepts valid in any language. I hope to convince you that thinking in\nterms of the type system helps you write better code\u2026",
  "duration": 1827,
  "language": "eng",
  "recorded": "2019-07-10",
  "related_urls": [
    {
      "label": "Conference schedule",
      "url": "https://ep2019.europython.eu/schedule/"
    },
    {
      "label": "slides",
      "url": "https://ep2019.europython.eu/media/conference/slides/LTm28H5-static-typing-beyond-the-basics-of-def-foox-int-str.pdf"
    }
  ],
  "speakers": [
    "Vita Smid"
  ],
  "tags": [
    "Static Analysis",
    "Type-Hinting"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/UQo-ebJk4a4/maxresdefault.jpg",
  "title": "Static typing: beyond the basics of def foo(x: int) -> str:",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=UQo-ebJk4a4"
    }
  ]
}
