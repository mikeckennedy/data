{
  "alias": "video/3226/python-is-slow-make-it-faster-with-c",
  "category": "Kiwi PyCon 2014",
  "copyright_text": "CC",
  "description": "**Audience level**\n\nIntermediate\n\n**Description**\n\nMost people have heard that it's possible to integrate Python with C to\ngive performance boosts to computationally heavy code, but because it\nseems daunting they've never given it a try. It's actually not as hard\nas you think. This talk covers some of the different methods of speeding\nup your code with C, and compares the results to those you can get from\nother methods, like using PyPy.\n\n**Abstract**\n\nIntroduction\n\nAs developers, we like to work with Python because it's forgiving, quick\nto develop for and allows our code to be very dynamic. Unfortunately the\ntrade-off for this magic is lower performance than compiled languages.\nPython can be sped up by offloading heavy algorithms to compiled C,\nusing specially built C modules utilising the C Python API, or by\nintegrating existing C libraries with using the python ctypes module. It\nis also possible to speed up Python using alternative interpreters, like\nPyPy, which uses a JIT compiler.\n\nPure Python Implementation\n\nFirst we will take a look at a CPU bound algorithm written purely in\nPython, and see how it performs. The program reads data and prints\nresults. The time it takes to run this will be considered the worst case\nscenario.\n\nPure C Implementation\n\nThe same program will be re-written in C, including the input and output\nlogic, and we will compare the time it takes to run against the Python\nimplementation. The results of the C implementation will be considered\nthe best case scenario.\n\nCustom Python Module with C Implementation\n\nPython provides an API, C development headers and special C types, to\nallow the creation of a specially built bridges between Python and C\ncode. In this example, the algorithm will be written in C, and bridged\nto Python with a custom Python/C module. Input and output takes place\nwithin Python, with C only performing the computation. With this method\nwe can achieve near best-case speeds, at the cost of some additional\n(and sometimes complicated) C coding.\n\nBridging To C with ctypes\n\nIntroduced in Python 2.5, ctypes allows Python to integrate with\npre-built C libraries without custom C code. This approach has the\nadvantage over the custom Python/C Module of not needing to write a lot\nof boilerplate and bridging code in C. As with the Py/C implementation,\nC is used only to execute the algorithm, and Python takes care of input\nand output. Again, performance is close to best-case speeds, but the\nwork to integrate with C is much less.\n\nAlternative Python Implementations\n\nPyPy uses a JIT compiler to offer impressive performance gains. The\noriginal Python code will be run through PyPy, and although the results\nmight not be as quite as good as using compiled C, they come close, and\nthe effort-to-gain ratio certainly makes it attractive option.\n\nConclusion\n\nEach performance boosting option has its pros and cons, and when it's so\neasy to just use PyPy and get good results, why would you still use C?\nWe'll look at some example use cases for each of the methods presented\nand why you would choose one over the others.\n\n**Slides**\n\nhttps://speakerdeck.com/nzpug/ben-shaw-python-is-slow-make-it-faster-with-c\n",
  "duration": 1800,
  "id": 3226,
  "language": "eng",
  "quality_notes": "",
  "recorded": "2014-09-13",
  "related_urls": [
    "https://speakerdeck.com/nzpug/ben-shaw-python-is-slow-make-it-faster-with-c"
  ],
  "slug": "python-is-slow-make-it-faster-with-c",
  "speakers": [
    "Ben Shaw"
  ],
  "summary": "",
  "tags": [
    "talk"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/tGLSKXfx0m0/hqdefault.jpg",
  "title": "Python is slow, make it faster with C",
  "videos": [
    {
      "length": 0,
      "type": "youtube",
      "url": "http://youtu.be/tGLSKXfx0m0"
    }
  ]
}
