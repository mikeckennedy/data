{
  "abstract": "Codegolfing, the art of condensing ones code, seems counterproductive to\ngood programming standards. In this talk, I will argue, with the use of\nexamples, that this need not be the case, that playing with a language\ncan give you better understanding of its internals, and in turn make you\na better programmer.\n\n*Tags:* Algorithms\n\nScheduled on `thursday 15:25 </schedule/#thu-15:25-lounge>`__ in room\nlounge\n",
  "copyright_text": null,
  "description": "Codegolfing means taking a programming task and trying to answer it with\na byte-minimal correct solution. Such an answer often takes shortcuts,\nis horribly inefficient, and definitely violates almost 100% of PEP 8.\nLike any playful interaction with a subject, it can however improve your\nunderstanding of it, as well as teach you about weird interactions\nregarding operator precedence, lexer quirks and more.\n\nAfter going over basic definitions, I will take a small number of\nwell-known or straightforward programming tasks and go through the act\nof golfing an answer together step by step.\n",
  "duration": 822,
  "language": "eng",
  "recorded": "2018-10-25",
  "related_urls": [
    {
      "label": "Conference schedule",
      "url": "https://de.pycon.org/schedule/"
    }
  ],
  "speakers": [
    "Jonathan Oberl\u00e4nder"
  ],
  "tags": [
    "Algorithms"
  ],
  "thumbnail_url": "https://i.ytimg.com/vi/DPKSSxtVXuY/maxresdefault.jpg",
  "title": "Python Birdies: Codegolfing for better understanding (and fun)",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=DPKSSxtVXuY"
    }
  ]
}
