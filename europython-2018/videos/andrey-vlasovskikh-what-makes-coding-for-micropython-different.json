{
  "copyright_text": "Creative Commons Attribution license (reuse allowed)",
  "description": "A microcontroller unit is a CPU, memory modules, and I/O devices on a\nsingle chip. There are tens of billions of microcontrollers in world:\nthey are everywhere from watches to cars. Developers program them mostly\nin C, since their tiny hardware resources make it very hard to use\nhigher-level langauges such as Python. In 2014 the MicroPython project\nwas started with the goal of making it possible to program\nmicrocontrollers in Python.\n\nWas it hard to make Python work on a device with only 16 KB of RAM? Is\nMicroPython a Python dialect or is it a different language? I\u2019ll start\nwith the most important optimizations and the key differences in the\nlanguage implementation to give you an idea of what MicroPython really\nis.\n\nMost of us are not contributors to MicroPython though and it\u2019s much more\nimportant for us to understand how Python coding for microcontrollers is\ndifferent from, say, web development or scripting. What do you need to\nlearn in order to program your mictrocontroller-based IoT devices? I\u2019ll\ntalk about several traits of Python coding for microcontrollers that\nmake it different, but exciting to learn.\n",
  "duration": 1629,
  "language": "eng",
  "recorded": "2018-07-25",
  "related_urls": [
    {
      "label": "Conference schedule",
      "url": "https://ep2018.europython.eu/p3/schedule/ep2018/"
    }
  ],
  "speakers": [
    "Andrey Vlasovskikh"
  ],
  "tags": [],
  "thumbnail_url": "https://i.ytimg.com/vi/Hy0W8tBpZu4/maxresdefault.jpg",
  "title": "What makes coding for MicroPython different?",
  "videos": [
    {
      "type": "youtube",
      "url": "https://www.youtube.com/watch?v=Hy0W8tBpZu4"
    }
  ]
}
